__XBN-PhraseExpress is released under the LGPL 2.1	(*XBN-PhraseExpress is a large set of generically-useful Microsoft Windows scripting tools, written in PhraseExpress, using the plain-text editor TextPad as its foundation.  //  Copyright (C) 2013 Jeff Epstein  //  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  //  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.  //  You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA*)		(*Two tabs plus this comment, to force this phrase to be (a) imported, and (b) with NO autotext*)
zzJgAddtnlPromptFuncsMsg	There are additional functions of interest to phrase developers.	zzJgAddtnlPromptFuncsMsg
zzJgOptInfoC	{#insert zTAB}-c-{#insert zEnterTab}Surround the signature with a <CODE> tag.{#insert zEnterBksp}{#insert zBKSP}	zzJgOptInfoC
zzJgOptInfoF	{#insert zTAB}-f-{#insert zEnterTab}Go to the start of the 'F'unction's signature-line.{#insert zEnterBksp}{#insert zBKSP}	zzJgOptInfoF
zzJgOptInfoG	{#insert zTAB}-g-{#insert zEnterTab}Include (or go-to) the si'G'nature-proper--the function-name followed by the parameters.{#insert zEnterBksp}{#insert zBKSP}	zzJgOptInfoG
zzJgOptInfoHafterQ	{#insert zTAB}-h- (as follows 'q'){#insert zEnterTab}Surround the function-name in 'H'tml-escaped double-quotes (&quot;).{#insert zEnterBksp}{#insert zBKSP}	zzJgOptInfoHafterQ
zzJgOptInfoHafterY	{#insert zTAB}-h- (as follows 'y'){#insert zEnterTab}'H'tml-escape the return-type's generics.{#insert zEnterBksp}{#insert zBKSP}	zzJgOptInfoHafterY
zzJgOptInfoK	{#insert zTAB}-k-{#insert zEnterTab}Transform the super-constructor signature into a JavaDoc lin'K'.{#insert zEnterBksp}{#insert zBKSP}	zzJgOptInfoK
zzJgOptInfoL	{#insert zTAB}-l-{#insert zEnterTab}Go-to, select, or copy the next function-signature ABOVE the cursor ('L' is on the top row in Dvorak-layout, directly above 'Z').{#insert zEnterBksp}{#insert zBKSP}	zzJgOptInfoL
zzJgOptInfoM	{#insert zTAB}-m- (*not* the first character in the phrase-name){#insert zEnterTab}Writes a y-'M'ark ('{#insert zYmark}') at the cursor-location before proceeding.{#insert zEnterBksp}{#insert zBKSP}	zzJgOptInfoM
zzJgOptInfoN	{#insert zTAB}-n-{#insert zEnterTab}Only keep parameter-'N'ames. Eliminate types (with 'dapt').{#insert zEnterBksp}{#insert zBKSP}	zzJgOptInfoN
zzJgOptInfoP	{#insert zTAB}-p-{#insert zEnterTab}Include (or go-to) the 'P'arameters{#insert zEnterBksp}{#insert zBKSP}	zzJgOptInfoP
zzJgOptInfoPromptPost_postSyntax	{#insert zENTER2}These functions present the user with a dialog to ask if the found-signature is indeed the correct one. This prevents writing the incorrect signature (having the same function-name, but a different set of parameters) back at the original-and-marked cursor location.{#insert zENTER2}For example: 'sccbmpprompt'{#insert zENTER2}When 'no' is entered by the user, indicating the incorrect signature was found, execution simply stops. However, the signature-regex remains as the search term, and, when the 'm' option is used, the y-'M'ark ('{#insert zYmark}') remains at the original cursor location. In this case, the RE-flag will need to be manually turned off.{#insert zENTER2}This option is intended only to be used internally, but may be useful to phrase-developers.{#insert zEnterBksp}{#insert zBKSP}	zzJgOptInfoPromptPost_postSyntax
zzJgOptInfoPromptPost_preSyntax	{#insert zTAB}-prompt-{#insert zEnterTab}There are additional functions available in this phrase-set, which are of likely interest to phrase developers only: (*ends with space*)	zzJgOptInfoPromptPost_preSyntax
zzJgOptInfoQ	{#insert zTAB}-q- (as follows 'thisfn[l,z]'){#insert zEnterTab}Surround the function-name in double-quotes ({#asc 34}).{#insert zEnterBksp}{#insert zBKSP}	zzJgOptInfoQ
zzJgOptInfoR	{#insert zTAB}-r-{#insert zEnterTab}Include (or go-to) the 'R'eturn-type.{#insert zEnterBksp}{#insert zBKSP}	zzJgOptInfoR
zzJgOptInfoT	{#insert zTAB}-t-{#insert zEnterTab}Only keep parameter-'T'ypes (without generics). Eliminate names (with 'dapn').{#insert zEnterBksp}{#insert zBKSP}	zzJgOptInfoT
zzJgOptInfoY	{#insert zTAB}-y-{#insert zEnterTab}Only keep parameter-t'Y'pes, including generics. Eliminate names (with 'dapn').{#insert zEnterBksp}{#insert zBKSP}	zzJgOptInfoY
zzJgOptInfoZ	{#insert zTAB}-z-{#insert zEnterTab}Go-to, select, or copy the next function-signature BELOW the cursor ('Z' is on the bottom row in Dvorak-layout, directly below 'L').{#insert zEnterBksp}{#insert zBKSP}	zzJgOptInfoZ
zzVFExampleLinkEfk	<A HREF={#asc 34}AnotherClass.html{#asc 34}>AnotherClass</A>.<A HREF={#asc 34}AnotherClass.html#func(){#asc 34}>func</A>(){#insert zEnterBksp}	zzVFExampleLinkEfk
zzVFExampleLinkEfky	AnotherClass.<A HREF={#asc 34}AnotherClass.html#func(){#asc 34}>func</A>(){#insert zEnterBksp}	zzVFExampleLinkEfky
zzVFExampleLinkErk	<A HREF={#asc 34}SuperClass.html{#asc 34}>super</A>.<A HREF={#asc 34}SuperClass.html#func(){#asc 34}>func</A>(){#insert zEnterBksp}	zzVFExampleLinkErk
zzVFExampleLinkErky	super.<A HREF={#asc 34}SuperClass.html#func(){#asc 34}>func</A>(){#insert zEnterBksp}	zzVFExampleLinkErky
zzVFExampleLinkIfk	<A HREF={#asc 34}AnotherClass.html{#asc 34}><I>[AnotherClass]</I></A>.<A HREF={#asc 34}AnotherClass.html#func(){#asc 34}>func</A>(){#insert zEnterBksp}	zzVFExampleLinkIfk
zzVFExampleLinkIfky	<I>[AnotherClass]</I>.<A HREF={#asc 34}AnotherClass.html#func(){#asc 34}>func</A>(){#insert zEnterBksp}	zzVFExampleLinkIfky
zzVFExampleLinkIrk	<A HREF={#asc 34}SuperClass.html{#asc 34}><I>[super]</I></A>.<A HREF={#asc 34}SuperClass.html#func(){#asc 34}>func</A>(){#insert zEnterBksp}	zzVFExampleLinkIrk
zzVFExampleLinkIrky	<I>[super]</I>.<A HREF={#asc 34}SuperClass.html#func(){#asc 34}>func</A>(){#insert zEnterBksp}	zzVFExampleLinkIrky
zzVFFkgOptBafterCnstrD	-B- (when following 'd'){#insert zEnterTab}The directory name is in the clip'B'oard.{#insert zEnterBksp}	zzVFFkgOptBafterCnstrD
zzVFFkgOptBafterDForDir	-B- (when following 'd'){#insert zEnterTab}The relative 'D'irectory (package) url--is in the clip'B'oard.{#insert zEnterBksp}	zzVFFkgOptBafterDForDir
zzVFFkgOptBafterDForFile	-B- (when following 'd'){#insert zEnterTab}The name of the file--which is in a different 'D'irectory (package)--is in the clip'B'oard.{#insert zEnterBksp}	zzVFFkgOptBafterDForFile
zzVFFkgOptBafterF	-B- (when following 'f'){#insert zEnterTab}The name of the 'F'ile (class) is in the clip'B'oard.{#insert zEnterBksp}	zzVFFkgOptBafterF
zzVFFkgOptBafterFkp	-B- (when following 'fkp[p]')-{#insert zEnterTab}The function name is in the clip'B'oard.{#insert zEnterBksp}	zzVFFkgOptBafterFkp
zzVFFkgOptBafterY	-B- (when following 'y'){#insert zEnterTab}The link-displa'Y' text is in the clip'B'oard.{#insert zEnterBksp}	zzVFFkgOptBafterY
zzVFFkgOptC	-C-{#insert zEnterTab}Insert the entire line, and post-</A> paremeters, into a <CODE> tag.{#insert zEnterBksp}	zzVFFkgOptC
zzVFFkgOptD	-D-{#insert zEnterTab}The function is in a class, which is in different 'D'irectory.{#insert zEnterBksp}	zzVFFkgOptD
zzVFFkgOptF	-F- (when following 'fk[g,p[p]][b]'){#insert zEnterTab}Indicates the function is in a different 'F'ile (class), in the same directory (package).{#insert zEnterBksp}	zzVFFkgOptF
zzVFFkgOptK	-K- (this is the 'k' somewhere after 'fkg' or 'fkp'){#insert zEnterTab}Creates an additional file-linK before the main function-link. Such as{#insert zEnterTab}<A HREF={#asc 34}SuperClass.html{#asc 34}>super</A>.<A HREF={#asc 34}SuperClass.html#func(){#asc 34}>func</A>(){#insert zEnterBksp}This requires an additional two-character display-text option. This option must exists between the signature-close-parenthesis and the cursor (just before typing the autotext of this fkg/fkp phrase). Avaliable options:{#insert zEnterTab}-ef- Display text is the file name.{#insert zENTER}-if- Display text is the file name, Italicized.{#insert zENTER}-er- Display text is 'super'.{#insert zENTER}-ir- Display text is the 'super', Italicized.{#insert zEnterBksp}Note that these options do not affect the link's url, only the display text. (The 'er' and 'ir' options are available at all times, but are obviously only appropriate when the target-file is the super-class.){#insert zEnterBksp}	zzVFFkgOptK
zzVFFkgOptN	-N-{#insert zEnterTab}Display text is 'constuctor'.{#insert zEnterBksp}	zzVFFkgOptN
zzVFFkgOptP	{#insert zTAB}-p- (as follows either 'fkg' or 'ckp'){#insert zEnterTab}No Post-</A> parameters{#insert zEnterBksp}	zzVFFkgOptP
zzVFFkgOptPrekALL	-[[e,i][f,r]k[y]]-{#insert zEnterTab}{#insert zzVFSubOptPrekIntro}{#insert zzVFPrekAllSubOpts}{#insert zBKSP}	zzVFFkgOptPrekALL
zzVFFkgOptPrekFileOnly	-[[e,i]fk[y]]-{#insert zEnterTab}{#insert zzVFSubOptPrekIntro}{#insert zzVFPrekEFIFSubOpts}{#insert zBKSP}	zzVFFkgOptPrekFileOnly
zzVFFkgOptREntrTbBody	{#insert zEnterTab}Display text is 'super'.{#insert zEnterBksp}	zzVFFkgOptREntrTbBody
zzVFFkgOptT	-T-{#insert zEnterTab}Display text is 'this'.{#insert zEnterBksp}	zzVFFkgOptT
zzVFFkgOptT	{#insert zTAB}-t-{#insert zEnterTab}Display text is 'this'{#insert zEnterBksp}	zzVFFkgOptT
zzVFFkgOptV	-V-{#insert zEnterTab}When provided, post-</A> paremeters are for display-only type abbreViations: {#asc 34}(s,b,o){#asc 34}. When not provided, they are for the (non-fully-qualified) type-names {#asc 34}(String, boolean, Object){#asc 34}. The former is for display-only, the latter is for use in literally-displayed code.{#insert zEnterBksp}	zzVFFkgOptV
zzVFFkgOptY	-Y-{#insert zEnterTab}No displaY text (and no post-</A> paremeters).{#insert zEnterBksp}	zzVFFkgOptY
zzVFFkgParamNote	--A NOTE ABOUT PARAMETERS--{#insert zENTER2}There are three types of parameters in a JavaDoc function-link:{#insert zEnterTab}- Url parameters: Fully-qualified type-names{#insert zEnterTab}- Example: (java.lang.Object, boolean){#insert zENTER}- Used only in the url. Never seen.{#insert zEnterBksp}- Post-</A> parameter type-abbreviations (papv){#insert zEnterTab}- Example: (o,b){#insert zENTER}- Used for display-purposes only. Intended as a short-hand for distinguishing between multiple signatures of the same function.{#insert zEnterBksp}- Post-</A> parameters, type-names only{#insert zEnterTab}- Example: (Object, boolean){#insert zENTER}- Intended for use in literally-displayed code snippets--when a function in the example-code should be linked.{#insert zEnterBksp}{#insert zBKSP}{#insert zENTER}Note that neither the exact papv-abbreviations, nor the fully-qualified papt-package-names are determined by this code. Instead, a standard replacement-token is printed it its place, immediately before the object's type-name, so a mass global-replacement can be made in the future.{#insert zENTER2}The url-parameter replacement-token is '{#insert zzDapnForFQCNTypePrefix}' (zzDapnForFQCNTypePrefix). For example:{#insert zEnterTab}({#insert zzDapnForFQCNTypePrefix}Object, {#insert zzDapnForFQCNTypePrefix}boolean){#insert zEnterBksp}The type-abbreviation replacement-token is '{#insert zzDapnForTypeAbbrevPrefix}' (zzDapnForTypeAbbrevPrefix). For example:{#insert zEnterTab}({#insert zzDapnForTypeAbbrevPrefix}Object, {#insert zzDapnForTypeAbbrevPrefix}boolean){#insert zEnterBksp}	zzVFFkgParamNote
zzVFPrekAllSubOpts	{#insert zzVFPrekEFIFSubOpts}{#insert zTAB}-erk-{#insert zEnterTab}The word 'super' is displayed--all 'rk' options are therefore only appropriate when the function-or-object is indeed in the super-class. Example:{#insert zEnterTab}{#insert zzVFExampleLinkErk}{#insert zBKSP}-erky-{#insert zEnterTab}Same as 'erk', except there is no link--displa'Y' only:{#insert zEnterTab}{#insert zzVFExampleLinkErky}{#insert zBKSP}-irk-{#insert zEnterTab}Same as 'erk', except the display is italicized and in square brackets. See 'ifk'.{#insert zEnterTab}{#insert zzVFExampleLinkIrk}{#insert zBKSP}-irky-{#insert zEnterTab}Same as 'erky', except the display is italicized and in square brackets.{#insert zEnterTab}{#insert zzVFExampleLinkIrky}{#insert zBKSP}	zzVFPrekAllSubOpts
zzVFPrekEFIFSubOpts	{#insert zTAB}-efk-{#insert zEnterTab}The file-name is displayed. Example:{#insert zEnterTab}{#insert zzVFExampleLinkEfk}{#insert zBKSP}-efky-{#insert zEnterTab}Same as 'efk', except there is no link.{#insert zEnterTab}{#insert zzVFExampleLinkEfky}{#insert zBKSP}-ifk-{#insert zEnterTab}Same as 'efk', except the display is italicized AND in square brackets.{#insert zEnterTab}{#insert zzVFExampleLinkIfk}Use this option when displaying a code-snippet, such as{#insert zEnterTab}if(isActive())  {{#insert zEnterTab}deactivate();{#insert zEnterBksp}}{#insert zEnterBksp}in documentation, you might link it like this{#insert zEnterTab}if(<A HREF={#asc 34}AnotherClass.html#isActive(){#asc 34}>isActive</A>())  {{#insert zEnterTab}<A HREF={#asc 34}#deactivate(){#asc 34}>deactivate</A>();{#insert zEnterBksp}}{#insert zEnterBksp}use the 'i' sub-option (in this case 'irk') to indicate that 'isActive()' is a function in the super-class, but that the 'super.' portion is not actually part of the code:{#insert zEnterTab}if(<A HREF={#asc 34}AnotherClass.html{#asc 34}>[<I>super</I>]</A>.<A HREF={#asc 34}AnotherClass.html#isActive{#asc 34}>isActive</A>())  {{#insert zEnterTab}<A HREF={#asc 34}#deactivate(){#asc 34}>deactivate</A>();{#insert zEnterBksp}}{#insert zEnterBksp}{#insert zBKSP}-ifky-{#insert zEnterTab}Same as 'ifk', except the display is italicized and in square brackets.{#insert zEnterTab}{#insert zzVFExampleLinkIfky}{#insert zBKSP}	zzVFPrekEFIFSubOpts
zzVFSubOptPrekIntro	Creates a link before the main function-or-object link (a 'pre-link' link: prek), which is an indication of the class in which the function-or-object resides. Note that when a prek link is used, its url is ALWAYS the file in which the function resides. The below sub-options only affect (1) if the link, or only its display-text is printed, and (2) if that display text is <I>[italicized and placed in square brackets]</I> (see 'ifk' below for more information on (2)).{#insert zEnterBksp}	zzVFSubOptPrekIntro
