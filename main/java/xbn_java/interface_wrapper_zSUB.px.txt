__XBN-PhraseExpress is released under the LGPL 2.1	(*XBN-PhraseExpress is a large set of generically-useful Microsoft Windows scripting tools, written in PhraseExpress, using the plain-text editor TextPad as its foundation.  //  Copyright (C) 2013 Jeff Epstein  //  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  //  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.  //  You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA*)		(*Two tabs plus this comment, to force this phrase to be (a) imported, and (b) with NO autotext*)
zzAtSuppressWrngEtr	@SuppressWarnings({#insert zAscQQ}unchecked{#insert zAscQQ}){#insert zENTER}	zzAtSuppressWrngEtr
zzBackJDSeeLinkToMainCnstr_M_fnmVPkgm	<P><I>See: <CODE><A HREF={#insert zAscQQ}#IW{#insert zvNTRFC_NAME}({#insert zzFqNtrfcNm_M_PkgmFnm}, xbn.lang.xcontext.ExceptionContext){#insert zAscQQ}>this</A>(iw,xc)</CODE></I></P>{#insert zENTER2}	zzBackJDSeeLinkToMainCnstr_M_fnmVPkgm
zzCIRtrnTypeES_M_rty	{#insert {#COND -if {#LENGTH {#TRIM {#insert zvRTRN_TYPE}}} = 0  -then zzErrDlgBadRtnType_M_rty -else z1slp}}	zzCIRtrnTypeES_M_rty
zzErrDlgBadRtnType_M_rty	{#MSGBOX -head ERROR -text ERROR ~~ Unknown or missing return type: '{#insert zvRTRN_TYPE}'{#insert zCancelProcNowPostTxt}}	zzErrDlgBadRtnType_M_rty
zzFqNtrfcNm_M_PkgmFnm	xbn.{#insert zvPST_XBN_PKG}.{#insert zvNTRFC_NAME}	zzFqNtrfcNm_M_PkgmFnm
zzFuncAticWrappersMarkerLineDDD	tatic wrappers for required interface functions...	zzFuncAticWrappersMarkerLineDDD
zzGTDocTopSetFcntToL1wBksp	{#insert zTPGTDocTop}{#insert zTPParaDown}{#insert zCutL1wBksp}{#SETPHRASE -description zvFUNC_COUNT -content {#INSERTCLIPBOARD} -autotext zvFUNC_COUNT -folder ctvv_folder}	zzGTDocTopSetFcntToL1wBksp
zzIWFQSprClsType_M_rnm -- Needs zvSPR_NTRFC_NM	{#COND -if {#insert zvSPR_NTRFC_NM} = InterfaceWrapper -then java.lang.Object -else {#COND -if {#insert zvSPR_NTRFC_NM} = IWXBNObjectable -then xbn.lang.XBNObjectable -else _4FQP_{#insert zvSPR_NTRFC_NM}}}	zzIWFQSprClsType_M_rnm
zzIWFunctionTemplate_M_nfnmRtyFnmPcntPkgm -- Needs zvPARAM_CNT, zvRTRN_TYPE, zvNTRFC_NAME, zvFOBJ_NAME, zvPST_XBN_PKG	{#BALLOON -title xbn.lang.InterfaceWrapper -text zvPARAM_CNT='{#insert zvPARAM_CNT}', zvRTRN_TYPE='{#insert zvRTRN_TYPE}', zvNTRFC_NAME='{#insert zvNTRFC_NAME}', zvFOBJ_NAME='{#insert zvFOBJ_NAME}', zvPST_XBN_PKG='{#insert zvPST_XBN_PKG}'}{#insert zzzIWFncTmpl1of4}{#insert zzzIWFncTmpl2of4}{#insert zzzIWFncTmpl3of4}{#insert zzzIWFncTmpl4of4}	zzIWFunctionTemplate_M_nfnmRtyFnmPcntPkgm
zzIWParam4FQPTypeCmaSpcLoop_M_fnm	{#insert zvNUMBER_st0}{#LOOP {#insert zvNUMBER_incBy1}_4FQP_{#insert zzzXmkFnmNum_M_fnmNum}, (*ends w spc*) -count {#insert zvPARAM_CNT}}	zzIWParam4FQPTypeCmaSpcLoop_M_fnm
zzIWParam4TVTypeNameCmaLoop_M_fnm	{#insert zvNUMBER_st0}{#LOOP {#insert zvNUMBER_incBy1}_4TV_{#insert zzzXmkFnmNum_M_fnmNum}, -count {#insert zvPARAM_CNT}}	zzIWParam4TVTypeNameCmaLoop_M_fnm
zzIWParamNameCmaSpcLoop	{#insert zvNUMBER_st0}{#LOOP {#insert zvNUMBER_incBy1}param_name{#insert zzzFnmNum_M_fnmNum}, (*ends w spc*) -count {#insert zvPARAM_CNT}}	zzIWParamNameCmaSpcLoop
zzIWParamTypeNameCmaSpcLoop_M_fnm	{#insert zvNUMBER_st0}{#LOOP {#insert zvNUMBER_incBy1}{#insert zzzXmkFnmNum_M_fnmNum} param_name{#insert zzzFnmNum_M_fnmNum}, (*ends w spc*) -count {#insert zvPARAM_CNT}}	zzIWParamTypeNameCmaSpcLoop_M_fnm
zzIWSprClsName_M_rnm -- Needs zvSPR_NTRFC_NM	{#COND -if {#insert zvSPR_NTRFC_NM} = InterfaceWrapper -then InterfaceWrapper -else {#COND -if {#insert zvSPR_NTRFC_NM} = XBNObjectable -then IWXBNObjectable -else IW{#insert zvSPR_NTRFC_NM}}}	zzIWSprClsName_M_rnm
zzIWSprClsType_M_rnm -- Needs zvSPR_NTRFC_NM	{#COND -if {#insert zvSPR_NTRFC_NM} = InterfaceWrapper -then Object -else {#COND -if {#insert zvSPR_NTRFC_NM} = IWXBNObjectable -then XBNObjectable -else {#insert zvSPR_NTRFC_NM}}}	zzIWSprClsType_M_rnm
zzImportXlIWEtr	import  xbn.lang.InterfaceWrapper;{#insert zENTER}	zzImportXlIWEtr
zzImportXlIWOrZIWXOEtrIf_M_rfnm -- Needs zvSPR_NTRFC_NM	{#insert {#COND -if {#insert zvSPR_NTRFC_NM} = InterfaceWrapper -then zzImportXlIWEtr -else {#COND -if {#insert zvSPR_NTRFC_NM} = XBNObjectable -then zzImportXlZIWXOAndXOblEtr -else z1slp}}}	zzImportXlIWOrZIWXOEtrIf_M_rfnm
zzImportXlZIWXOAndXOblEtr	import  xbn.z.iw.lang.IWXBNObjectable;{#insert zENTER}import  xbn.lang.XBNObjectable;{#insert zENTER}	zzImportXlZIWXOAndXOblEtr
zzInterfaceWrapperTemplate_M_fnmRfnmPkgm -(*Needs*)-	(*Needs zvNTRFC_NAME, zvSPR_NTRFC_NM, zvPST_XBN_PKG*){#BALLOON -title xbn.lang.InterfaceWrapper -text zvNTRFC_NAME='{#insert zvNTRFC_NAME}', zvSPR_NTRFC_NM='{#insert zvSPR_NTRFC_NM}', zvPST_XBN_PKG='{#insert zvPST_XBN_PKG}', zvFUNC_COUNT='{#insert zvFUNC_COUNT}'}{#insert zzzItwtPreCnstr}{#insert zzzItwtCnstr1}{#insert zzzItwtCnstr2}{#insert zzzItwtSetInst}{#insert zzzItwtGetInstGetXCpGTPFuncConfigs}{#insert zzzItwtDontUseFunc}{#insert zzIwtRplcAllGnrcsWPrompts}{#insert zBalloonDone}	zzInterfaceWrapperTemplate_M_fnmRfnmPkgm
zzIwftRAW	{#insert zzzClearAllBkmksMarkNxtLineGoBack}{#insert zCutL1wBksp}{#SETPHRASE -description zvPARAM_CNT -content {#INSERTCLIPBOARD} -autotext zvPARAM_CNT -folder ctvv_folder}{#insert zCutL1w}{#SETPHRASE -description zvFOBJ_NAME -content {#INSERTCLIPBOARD} -autotext zvFOBJ_NAME -folder ctvv_folder}{#insert zBKSP}{#insert zCutL1w}{#SETPHRASE -description zvRTRN_TYPE -content {#INSERTCLIPBOARD} -autotext zvRTRN_TYPE -folder ctvv_folder}{#insert zzCIRtrnTypeES_M_rty}{#insert zzIWFunctionTemplate_M_nfnmRtyFnmPcntPkgm}	zzIwftRAW
zzIwftn_M_fcnt -- Needs zvFUNC_COUNT	{#LOOP {#insert zzIwftRAW}{#sleep 500} -count {#insert zvFUNC_COUNT}}	zzIwftn_M_fcnt
zzIwrootxPostFuncCount	(*starts w spc*) 3{#insert zEnterTab}boolean isGood 0{#insert zENTER}void doSomething 1{#insert zENTER}Object getTheObject 0{#insert zEnterBksp}	zzIwrootxPostFuncCount
zzIwtRemoveGnrcsMrkrs	{#insert zTPBookmarkClearAll}{#insert zFcsTPRplcDlgOpen}{#insert zzQltSPACE_GENERICSTHISgt}{#insert zRplcWithNOTHING}{#insert zRplcBtnAllTDHnr}{#SETPHRASE -description zvFIND_WHAT -content <{#insert zzqGENERICSTHIS}> -autotext zvFIND_WHAT -folder ctvv_folder}{#insert zvFIND_WHAT}{#insert zRplcWithNOTHING}{#insert zRplcBtnAllTD}{#SETPHRASE -description zvFIND_WHAT -content &lt;{#insert zzqGENERICSTHIS}&gt; -autotext zvFIND_WHAT -folder ctvv_folder}{#insert zvFIND_WHAT}{#insert zRplcWithNOTHING}{#insert zRplcBtnAllTDHnr}{#insert zTPFindDlgOpen}@SuppressWarnings{#insert zFindBtnMarkAllThnEtr}{#insert zFindDlgClose}{#insert zTPBookmarkDeleteAll}	zzIwtRemoveGnrcsMrkrs
zzIwtRemoveSprGnrcsMrkrs	{#insert zFcsTPRplcDlgOpen}{#insert zzQltGENERICSSUPERgt}{#insert zRplcWithNOTHING}{#insert zRplcBtnAllTD}{#insert zRplcDlgClose}	zzIwtRemoveSprGnrcsMrkrs
zzIwtRplcSprGnrcs_M_gnr	{#insert zFcsTPRplcDlgOpen}{#insert zzQltGENERICSSUPERgt}{#insert zRplcFieldWith}{#insert zzQLtGnrcsgt_M_gnr}{#insert zRplcBtnAllTDHnr}{#insert zRplcDlgClose}	zzIwtRplcSprGnrcs_M_gnr
zzIwtRplcThisGnrcsSprIfIwtsubWPrompts	{#insert zzIwtRplcThisGnrcsWPrompt}{#insert {#COND -if {#insert zvSPR_NTRFC_NM} = InterfaceWrapper -then zzIwtRemoveSprGnrcsMrkrs -else {#COND -if {#insert zvSPR_NTRFC_NM} = IWXBNObjectable -then zzIwtRemoveSprGnrcsMrkrs -else zzRplcSprGnrcsWPrompts}}}	zzIwtRplcAllGnrcsWPrompts
zzIwtRplcThisGnrcsWPrompt	{#insert zTPGTDocTop}{#SETPHRASE -description zvGENERICS -content {#INPUT -head {#insert zvNTRFC_NAME}<???> \(*nothing* if no generics) -single} -autotext zvGENERICS -folder ctvv_folder}{#insert {#COND -if {#LENGTH {#insert zvGENERICS}} = 0 -then zzIwtRemoveGnrcsMrkrs -else zzIwtRplcThsGnrcs_M_gnr}}	zzIwtRplcThisGnrcsWPrompt
zzIwtRplcThsGnrcs_M_gnr	{#insert zFcsTPRplcDlgOpen}{#insert zzQltSPACE_GENERICSTHISgt}{#insert zRplcFieldWith}{#insert zzQspcLtGnrcsgt_M_gnr}{#insert zRplcBtnAllTDHnr}{#insert zzqGENERICSTHIS}{#insert zRplcFieldWith}{#insert zvGENERICS}{#insert zRplcBtnAllTD}{#insert zRplcDlgClose}	zzIwtRplcThsGnrcs_M_gnr
zzIwtrootxPreFuncCount	lang.xcontext{#BALLOON -title Package name -text Package name is post 'xbn.'}{#sleep 2000} ExceptionContextElement	zzIwtrootxPreFuncCount
zzIwtsyns1of2	iwt[root,sub,xo][x]	zzIwtsyns1of2
zzIwtsyns2of2	iwft[n[x],x]	zzIwtsyns2of2
zzJDRtrnEqToPostfix_M_rty -- Needs zvRTRN_TYPE	{#insert {#COND -if {#insert zvRTRN_TYPE} = void -then zzQClsP -else z1slp}}	zzJDRtrnEqToPostfix_M_rty
zzJDRtrnEqToPrefix_M_rty -- Needs zvRTRN_TYPE	{#insert {#COND -if {#insert zvRTRN_TYPE} != void -then zzzAtRtn2Spcs -else zzzPEqToEtrBr5Spcs}}	zzJDRtrnEqToPrefix_M_rty
zzQClsP	</P>	zzQClsP
zzQltGENERICSSUPERgt	<{#insert zzqGENERICSSUPER}>	zzQltGENERICSSUPERgt
zzQltSPACE_GENERICSTHISgt	<SPACE_GENERICSTHIS>	zzQltSPACE_GENERICSTHISgt
zzQspcLtGnrcsgt_M_gnr	(*starts w spc*) <{#insert zvGENERICS}>	zzQspcLtGnrcsgt_M_gnr
zzQLtGnrcsgt_M_gnr	<{#insert zvGENERICS}>	zzQLtGnrcsgt_M_gnr
zzReturnSpcSpcIfNotVoid_M_rty -- Needs zvRTRN_TYPE	{#COND -if {#insert zvRTRN_TYPE} != void -then return  (*ends w 2 spcs*) -else}	zzReturnSpcSpcIfNotVoid_M_rty
zzRplcSprGnrcsWPrompts	{#SETPHRASE -description zvGENERICS -content {#INPUT -head {#insert zvSPR_NTRFC_NM}<???> \(*nothing* if no generics) -single} -autotext zvGENERICS -folder ctvv_folder}{#insert {#COND -if {#LENGTH {#insert zvGENERICS}} = 0 -then zzIwtRemoveSprGnrcsMrkrs -else zzIwtRplcSprGnrcs_M_gnr}}	zzRplcSprGnrcsWPrompts
zzRplcYDotFNmTo4Fqp_M_fnm	{#insert zRplcDlgOpenMCOnly}{#SETPHRASE -description zvFIND_WHAT -content {#insert zYmark}.{#insert zvNTRFC_NAME} -autotext zvFIND_WHAT -folder ctvv_folder}{#insert zvFIND_WHAT}{#insert zRplcFieldWith}{#SETPHRASE -description zvRPLC_WITH -content _4FQP_{#insert zvNTRFC_NAME} -autotext zvRPLC_WITH -folder ctvv_folder}{#insert zvRPLC_WITH}{#insert zRplcBtnAllTDHnrRAW}{#insert zRplcDlgClose}	zzRplcYDotFNmTo4Fqp_M_fnm
zzSetIntrfcNmToL1wPkgNmToYmk	{#insert zCutL1wBksp}{#SETPHRASE -description zvNTRFC_NAME -content {#INSERTCLIPBOARD} -autotext zvNTRFC_NAME -folder ctvv_folder}{#SETPHRASE -description zvPST_XBN_PKG -content {#insert zYmark} -autotext zvPST_XBN_PKG -folder ctvv_folder}	zzSetIntrfcNmToL1wPkgNmToYmk
zzSetNtrfcNmToL1wPkgNmToHomeNoEndBksp	{#insert zCutL1wBksp}{#SETPHRASE -description zvNTRFC_NAME -content {#INSERTCLIPBOARD} -autotext zvNTRFC_NAME -folder ctvv_folder}{#insert zCutToLineHome}{#SETPHRASE -description zvPST_XBN_PKG -content {#INSERTCLIPBOARD} -autotext zvPST_XBN_PKG -folder ctvv_folder}	zzSetNtrfcNmToL1wPkgNmToHomeNoEndBksp
zzqGENERICSSUPER	GENERICSSUPER	zzqGENERICSSUPER
zzqGENERICSTHIS	GENERICSTHIS	zzqGENERICSTHIS
zzzAtRtn2Spcs	@return  (*ends w 2 spcs*)	zzzAtRtn2Spcs
zzzBksp2IfGT0Prms_M_pcnt -- Needs zvPARAM_CNT	{#insert {#COND -if {#insert zvPARAM_CNT} > 0 -then zBKSP2 -else z1slp}}	zzzBksp2IfGT0Prms_M_pcnt
zzzBkspIfGT0Prms_M_pcnt -- Needs zvPARAM_CNT	{#insert {#COND -if {#insert zvPARAM_CNT} > 0 -then zBKSP -else z1slp}}	zzzBkspIfGT0Prms_M_pcnt
zzzClearAllBkmksMarkNxtLineGoBack	{#insert zTPBookmarkClearAll}{#insert zRIGHT}{#insert zTPBookmarkToggle}{#insert zLEFT}	zzzClearAllBkmksMarkNxtLineGoBack
zzzFnmNum_M_fnmNum -- Needs zvFOBJ_NAME, zvNUMBER	{#insert zvFOBJ_NAME}{#insert zvNUMBER}	zzzFnmNum_M_fnmNum
zzzFuncNonStaticWrappersMarkerLineDDD	//Non s{#insert zzFuncAticWrappersMarkerLineDDD}	zzzFuncNonStaticWrappersMarkerLineDDD
zzzFuncNonStaticWrappersMarkerLineDDDEnd	{#insert zzzFuncNonStaticWrappersMarkerLineDDD}END	zzzFuncNonStaticWrappersMarkerLineDDDEnd
zzzFuncNonStaticWrappersMarkerLineDDDStart	{#insert zzzFuncNonStaticWrappersMarkerLineDDD}START	zzzFuncNonStaticWrappersMarkerLineDDDStart
zzzFuncWrappersMarkerLineDDD	//S{#insert zzFuncAticWrappersMarkerLineDDD}	zzzFuncWrappersMarkerLineDDD
zzzFuncWrappersMarkerLineDDDEnd	{#insert zzzFuncWrappersMarkerLineDDD}END	zzzFuncWrappersMarkerLineDDDEnd
zzzFuncWrappersMarkerLineDDDStart	{#insert zzzFuncWrappersMarkerLineDDD}START	zzzFuncWrappersMarkerLineDDDStart
zzzIWFncTmpl1of4	/**{#insert zEnterTab}<P>Wrapper for <CODE><I>[{#insert zvNTRFC_NAME}]</I>.{#insert zvFOBJ_NAME}({#insert zzIWParam4TVTypeNameCmaLoop_M_fnm}{#insert zzzBkspIfGT0Prms_M_pcnt})</CODE>.</P>{#insert zENTER2}{#insert zYmark}{#insert zENTER2}{#insert zzJDRtrnEqToPrefix_M_rty}<CODE>IW{#insert zvNTRFC_NAME}.<A HREF={#insert zAscQQ}#{#insert zvFOBJ_NAME}({#insert zzIWParam4FQPTypeCmaSpcLoop_M_fnm}{#insert zzFqNtrfcNm_M_PkgmFnm}, xbn.lang.xcontext.ExceptionContext){#insert zAscQQ}>{#insert zvFOBJ_NAME}</A>({#insert zzIWParamNameCmaSpcLoop}<A HREF={#insert zAscQQ}#getIInstance(){#insert zAscQQ}>getIInstance</A>(), <A HREF={#insert zAscQQ}InterfaceWrapper.html{#insert zAscQQ}><I>super</I></A>.<A HREF={#insert zAscQQ}InterfaceWrapper.html#getXContext(){#insert zAscQQ}>getXContext</A>())</CODE>{#insert zzJDRtrnEqToPostfix_M_rty}{#insert zEnterBksp} **/{#insert zEnterBksp}	zzzIWFncTmpl1of4
zzzIWFncTmpl2of4	public final {#insert zvRTRN_TYPE} {#insert zvFOBJ_NAME}({#insert zzIWParamTypeNameCmaSpcLoop_M_fnm}{#insert zzzBksp2IfGT0Prms_M_pcnt})  {{#insert zENTER}{#insert zzReturnSpcSpcIfNotVoid_M_rty}IW{#insert zvNTRFC_NAME}.{#insert zvFOBJ_NAME}({#insert zzIWParamNameCmaSpcLoop}getIInstance(), getXContext());{#insert zEnterBksp}\\\}{#insert zFindDlgOpenDownMCOnly}{#insert zzzFuncWrappersMarkerLineDDDEnd}{#insert zFindBtnNext}{#insert zFindDlgClose}{#sleep 100}{#insert zTPNewLineBefore}{#insert zTAB}/**{#insert zEnterTab}<P>Wrapper for <CODE><I>[{#insert zvNTRFC_NAME}]</I>.{#insert zvFOBJ_NAME}({#insert zzIWParam4TVTypeNameCmaLoop_M_fnm}{#insert zzzBkspIfGT0Prms_M_pcnt})</CODE>.</P>{#insert zENTER2}{#insert zYmark}{#insert zENTER2}{#insert zzJDRtrnEqToPrefix_M_rty}<CODE>o_iinstance.<A HREF={#insert zAscQQ}{#insert zYmark}/{#insert zvNTRFC_NAME}.html#{#insert zvFOBJ_NAME}({#insert zzIWParam4FQPTypeCmaSpcLoop_M_fnm}{#insert zzzBksp2IfGT0Prms_M_pcnt}){#insert zAscQQ}>{#insert zvFOBJ_NAME}</A>({#insert zzIWParamNameCmaSpcLoop}{#insert zzzBksp2IfGT0Prms_M_pcnt})</CODE>{#insert zzJDRtrnEqToPostfix_M_rty}{#insert zENTER}@param  o_iinstance  May not be <CODE>null</CODE>.{#insert zENTER}@param  x_c  May not be <CODE>null</CODE>.{#insert zENTER}	zzzIWFncTmpl2of4
zzzIWFncTmpl3of4	@exception  NullPointerException  When <CODE>o_iinstance</CODE> is <CODE>null</CODE>{#insert zENTER}@exception  BadInterfaceBehaviorException  When <CODE>o_iinstance</CODE> is non-<CODE>null</CODE> and the call to <CODE>{#insert zvFOBJ_NAME}()</CODE> fails for any unexpected reason. Its message is constructed by <CODE><A HREF={#insert zAscQQ}{#insert zYmark}/XBNObject.html{#insert zAscQQ}><I>XBNObject</I></A>.<A HREF={#insert zAscQQ}{#insert zYmark}/XBNObject.html#getUnknownAttemptingXMsg(java.lang.String, java.lang.String, xbn.lang.xcontext.ExceptionContext){#insert zAscQQ}>getUnknownAttemptingXMsg</A>(s,s,xc)</CODE>{#insert zEnterBksp} **/{#insert zEnterBksp}public static final{#insert zzQltSPACE_GENERICSTHISgt} {#insert zvRTRN_TYPE} {#insert zvFOBJ_NAME}({#insert zzIWParamTypeNameCmaSpcLoop_M_fnm}	zzzIWFncTmpl3of4
zzzIWFncTmpl4of4	{#insert zvNTRFC_NAME}<{#insert zzqGENERICSTHIS}> o_iinstance, ExceptionContext x_c)  {{#insert zENTER}try  {{#insert zENTER}{#insert zzReturnSpcSpcIfNotVoid_M_rty}o_iinstance.{#insert zvFOBJ_NAME}({#insert zzIWParamNameCmaSpcLoop}{#insert zzzBksp2IfGT0Prms_M_pcnt});{#insert zENTER}\\\}  catch(RuntimeException rtx)  {{#insert zENTER}ciNull(o_iinstance, {#insert zAscQQ}{#insert zvFOBJ_NAME}{#insert zAscQQ}, {#insert zAscQQ}o_iinstance{#insert zAscQQ}, null, x_c);{#insert zENTER}throw  new BadInterfaceBehaviorException(getUnknownAttemptingXMsg({#insert zAscQQ}{#insert zvFOBJ_NAME}{#insert zAscQQ}, null, x_c), rtx);{#insert zENTER}\\\}{#insert zENTER}\\\}{#insert zTPBookmarkGTPrev}{#insert zTPParaDown}	zzzIWFncTmpl4of4
zzzItwtCnstr1	/**{#insert zEnterTab}<P>Create a new <CODE>IW{#insert zvNTRFC_NAME}</CODE>.</P>{#insert zENTER2}<!-- MAIN FUNCTION -->{#insert zENTER2}<P><I>See:<UL>{#insert zEnterTab}<LI><CODE><A HREF={#insert zAscQQ}#IW{#insert zvNTRFC_NAME}(xbn.z.iw.{#insert zvPST_XBN_PKG}.IW{#insert zvNTRFC_NAME}){#insert zAscQQ}>this</A>(iw)</CODE>, <CODE><A HREF={#insert zAscQQ}#setGetIInstance({#insert zzFqNtrfcNm_M_PkgmFnm}, java.lang.String){#insert zAscQQ}>setGetIInstance</A>(o,s)</CODE>, <CODE><A HREF={#insert zAscQQ}#getIInstance(){#insert zAscQQ}>getIInstance</A>()</CODE></LI>{#insert zENTER}<LI><A HREF={#insert zAscQQ}#mainfuncs{#insert zAscQQ}>All main functions</A></LI>{#insert zEnterBksp}</UL></I></P>{#insert zENTER2}<P>Equal to{#insert zENTER}<BR> &nbsp; &nbsp; <CODE><A HREF={#insert zAscQQ}{#insert zYmark}/{#insert zzIWSprClsName_M_rnm}.html#{#insert zzIWSprClsName_M_rnm}({#insert zzIWFQSprClsType_M_rnm}, xbn.lang.xcontext.ExceptionContext){#insert zAscQQ}>super</A>(o_iinstance, x_c)</CODE></P>{#insert zEnterBksp} **/{#insert zEnterBksp}public IW{#insert zvNTRFC_NAME}({#insert zvNTRFC_NAME}<{#insert zzqGENERICSTHIS}> o_iinstance, ExceptionContext x_c)  {{#insert zENTER}super(o_iinstance, x_c);{#insert zEnterBksp}\\\}{#insert zENTER}	zzzItwtCnstr1
zzzItwtCnstr2	/**{#insert zEnterTab}<P>Create a new <CODE>IW{#insert zvNTRFC_NAME}</CODE> as a duplicate of another.</P>{#insert zENTER2}{#insert zzBackJDSeeLinkToMainCnstr_M_fnmVPkgm}<P>Equal to{#insert zENTER}<BR> &nbsp; &nbsp; <CODE><A HREF={#insert zAscQQ}{#insert zYmark}/{#insert zzIWSprClsName_M_rnm}.html#{#insert zzIWSprClsName_M_rnm}({#COND -if {#insert zvSPR_NTRFC_NM} = InterfaceWrapper -then xbn.lang.InterfaceWrapper -else {#COND -if {#insert zvSPR_NTRFC_NM} = IWXBNObjectable -then xbn.lang.z.IWXBNObjectable -else _4FQP_IW{#insert zvSPR_NTRFC_NM}}}){#insert zAscQQ}>super</A>(iw_toCopy)</CODE></P>{#insert zEnterBksp} **/{#insert zEnterBksp}public IW{#insert zvNTRFC_NAME}(IW{#insert zvNTRFC_NAME}<{#insert zzqGENERICSTHIS}> iw_toCopy)  {{#insert zENTER}super(iw_toCopy);{#insert zEnterBksp}\\\}{#insert zENTER}	zzzItwtCnstr2
zzzItwtDontUseFunc	/**{#insert zEnterTab}<P><I>Do not use.</I></P>{#insert zENTER2}@exception  UnsupportedOperationException{#insert zEnterBksp} **/{#insert zEnterBksp}public final {#insert zzIWSprClsType_M_rnm}<{#insert zzqGENERICSSUPER}> setGetIInstance({#insert zzIWSprClsType_M_rnm}<{#insert zzqGENERICSSUPER}> igno_red1, String igno_red2)  {{#insert zENTER}throw  new UnsupportedOperationException({#insert zAscQQ}setGetIInstance(o,s){#insert zAscQQ});{#insert zENTER}(*{#insert zBKSP}*)\\\}{#insert zEnterBksp}\\\}{#insert zENTER}{#insert zXUpDelete}{#insert zTPParaDown}{#insert zzIwftn_M_fcnt}	zzzItwtDontUseFunc
zzzItwtGetInstGetXCpGTPFuncConfigs	/**{#insert zEnterTab}<P>Get the <CODE>{#insert zvNTRFC_NAME}</CODE> instance.</P>{#insert zENTER2}<P><I>See: <CODE><A HREF={#insert zAscQQ}#IW{#insert zvNTRFC_NAME}({#insert zzFqNtrfcNm_M_PkgmFnm}, xbn.lang.xcontext.ExceptionContext){#insert zAscQQ}>this</A>(iw,xc)</CODE></I></P>{#insert zENTER}<P>Equal to{#insert zENTER}<BR> &nbsp; &nbsp; <CODE>({#insert zvNTRFC_NAME}&lt;{#insert zzqGENERICSTHIS}&gt;)<A HREF={#insert zAscQQ}{#insert zYmark}/{#insert zzIWSprClsName_M_rnm}.html{#insert zAscQQ}>super</A>.<A HREF={#insert zAscQQ}{#insert zYmark}/{#insert zzIWSprClsName_M_rnm}.html#getIInstance(){#insert zAscQQ}>getIInstance</A>()</CODE></P>{#insert zEnterBksp} **/{#insert zEnterBksp}{#insert zzAtSuppressWrngEtr}public {#insert zvNTRFC_NAME}<{#insert zzqGENERICSTHIS}> getIInstance()  {{#insert zENTER}return  ({#insert zvNTRFC_NAME}<{#insert zzqGENERICSTHIS}>)super.getIInstance();{#insert zEnterBksp}\\\}{#insert zENTER}/**{#insert zEnterTab}@return  <CODE>(new <A HREF={#insert zAscQQ}#IW{#insert zvNTRFC_NAME}(_4FQP_IW{#insert zvNTRFC_NAME}){#insert zAscQQ}>IW{#insert zvNTRFC_NAME}</A>&lt;{#insert zzqGENERICSTHIS}&gt;(this))</CODE>{#insert zEnterBksp} **/{#insert zEnterBksp}public IW{#insert zvNTRFC_NAME}<{#insert zzqGENERICSTHIS}> getXObjectCopy()  {{#insert zENTER}return  (new IW{#insert zvNTRFC_NAME}<{#insert zzqGENERICSTHIS}>(this));{#insert zEnterBksp}\\\}{#insert zEnterBksp}{#insert zzzFuncNonStaticWrappersMarkerLineDDDStart}{#insert zENTER}{#insert zXmark}{#insert zTPGTDocBottom}{#insert zENTER}{#insert zHOME}{#insert zzzFuncNonStaticWrappersMarkerLineDDDEnd}{#insert zENTER}{#insert zzzFuncWrappersMarkerLineDDDStart}{#insert zENTER}{#insert zzzFuncWrappersMarkerLineDDDEnd}{#insert zEnterTab}	zzzItwtGetInstGetXCpGTPFuncConfigs
zzzItwtPreCnstr	package  xbn.z.iw.{#insert zvPST_XBN_PKG};{#insert zEnterTab}import  {#insert zzFqNtrfcNm_M_PkgmFnm};{#insert zENTER}{#insert zzImportXlIWOrZIWXOEtrIf_M_rfnm}{#insert zTAB}import  xbn.lang.BadInterfaceBehaviorException;{#insert zENTER}import  xbn.lang.xcontext.ExceptionContext;{#insert zEnterBksp}{#insert zBKSP}/**{#insert zEnterTab}<P>An <CODE>InterfaceWrapper</CODE> for <CODE>{#insert zvNTRFC_NAME}</CODE>-s.</P>{#insert zEnterBksp} **/{#insert zEnterBksp}public class IW{#insert zvNTRFC_NAME}<{#insert zzqGENERICSTHIS}> extends {#insert zzIWSprClsName_M_rnm}<{#insert zzqGENERICSSUPER}> implements {#insert zvNTRFC_NAME}<{#insert zzqGENERICSTHIS}>  {{#insert zENTER}	zzzItwtPreCnstr
zzzItwtSetInst	/**{#insert zEnterTab}<P>Set the <CODE>{#insert zvNTRFC_NAME}</CODE> instance.</P>{#insert zENTER2}{#insert zzBackJDSeeLinkToMainCnstr_M_fnmVPkgm}<P>Equal to{#insert zENTER}<BR> &nbsp; &nbsp; <CODE>({#insert zvNTRFC_NAME}&lt;{#insert zzqGENERICSTHIS}&gt;)<A HREF={#insert zAscQQ}{#insert zYmark}/{#insert zzIWSprClsName_M_rnm}.html{#insert zAscQQ}>super</A>.<A HREF={#insert zAscQQ}{#insert zYmark}/{#insert zzIWSprClsName_M_rnm}.html#setGetIInstance(java.lang.String, {#insert zzIWFQSprClsType_M_rnm}){#insert zAscQQ}>setGetIInstance</A>(o_iinstance, s_nnObjName)</CODE></P>{#insert zEnterBksp} **/{#insert zEnterBksp}{#insert zzAtSuppressWrngEtr}public {#insert zvNTRFC_NAME}<{#insert zzqGENERICSTHIS}> setGetIInstance({#insert zvNTRFC_NAME}<{#insert zzqGENERICSTHIS}> o_iinstance, String s_nnObjName)  {{#insert zENTER}return  ({#insert zvNTRFC_NAME}<{#insert zzqGENERICSTHIS}>)super.setGetIInstance(s_nnObjName, o_iinstance);{#insert zEnterBksp}\\\}{#insert zENTER}	zzzItwtSetInst
zzzPEqToEtrBr5Spcs	<P>Equal to{#insert zENTER}<BR> &nbsp; &nbsp; (*ends w spc*)	zzzPEqToEtrBr5Spcs
zzzXmkFnmNum_M_fnmNum -- Needs zvFOBJ_NAME, zvNUMBER	{#insert zXmark}{#insert zzzFnmNum_M_fnmNum}	zzzXmkFnmNum_M_fnmNum
