xjcgoc -- XBN-Java copy cnstr & corresponding getObjectCopy() func	{#insert zXSetFObjNmToThisClassXDownDel}{#SETPHRASE -description zvFOBJ_ABRV -content {#INPUT -head Short abbrev for {#insert zvFOBJ_NAME}? -single} -autotext zvFOBJ_ABRV -folder ctvv_folder}{#SETPHRASE -description zvALL_PARAMS -content {#insert ({#insert zvFOBJ_NAME} {#insert zvFOBJ_ABRV}_toCopy)} -autotext zvALL_PARAMS -folder ctvv_folder}{#insert zzXJGetObjCopyFunc_M_cnmPrms}{#insert zzXJCopyCnstrBody_M_cnmVPrms}{#insert zzXJGetObjCopyFunc_M_cnmVPrms}	xjcgoc
zzXJCopyCnstrJDBlock_M_cnmVPrms -- Needs zvFOBJ_NAME, zvFOBJ_ABRV, zvALL_PARAMS	/**{#insert zEnterTab}<P>Create a new <CODE>{#insert zvFOBJ_NAME}</CODE> as a duplicate of another.</P>{#insert zENTER2}<P><I>See: <CODE><A HREF={#insert zAscQQ}#getObjectCopy(){#insert zAscQQ}>getObjectCopy</A>()</CODE></I></P>{#insert zENTER2}@param  {#insert zvFOBJ_ABRV}_toCopy  May not be <CODE>null</CODE>.{#insert zEnterBksp} **/{#insert zEnterBksp}	zzXJCopyCnstrJDBlock_M_cnmVPrms
zzXJCopyCnstrBody_M_cnmVPrms -- Needs zvFOBJ_NAME, zvFOBJ_ABRV, zvALL_PARAMS	public {#insert zvFOBJ_NAME}{#insert zvALL_PARAMS}  {{#insert zENTER}try  \\\{{#insert zENTER}{#insert zYmark} = {#insert zvFOBJ_ABRV}_toCopy.{#insert zYmark};{#insert zENTER}\\\}  catch(NullPointerException npx)  \\\{{#insert zENTER}throw  new NullPointerException({#insert zAscQQ}constructor: {#insert zvFOBJ_ABRV}_toCopy{#insert zAscQQ});{#insert zENTER}\\\}{#insert zENTER}\\\}{#insert zENTER2}	zzXJCopyCnstrBody_M_cnmVPrms
zzXJGetObjCopyFunc_M_cnmPrms -- Needs zvFOBJ_NAME, zvALL_PARAMS	/**{#insert zEnterTab}<P>Get a duplicate of <I>this</I> <CODE>{#insert zvFOBJ_NAME}</CODE>.</P>{#insert zENTER2}@return  <CODE>(new {#insert zvHIDRUN_stH}{#insert zvPAP_TMVY_stT}{#insert z1PPFuncLinkDispFNmCdd_M_drnFnmPrmsPap}(this))</CODE>{#insert zEnterBksp} **/{#insert zEnterBksp}public {#insert zvFOBJ_NAME} getObjectCopy()  \\\{{#insert zENTER}return  (new {#insert zvFOBJ_NAME}(this));{#insert zENTER}\\\}{#insert zENTER2}	zzXJGetObjCopyFunc_M_cnmPrms
