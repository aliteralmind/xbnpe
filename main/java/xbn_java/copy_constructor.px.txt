__XBN-PhraseExpress is released under the LGPL 2.1	(*XBN-PhraseExpress is a large set of generically-useful Microsoft Windows scripting tools, written in PhraseExpress, using the plain-text editor TextPad as its foundation.  //  Copyright (C) 2013 Jeff Epstein  //  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  //  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.  //  You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA*)		(*Two tabs plus this comment, to force this phrase to be (a) imported, and (b) with NO autotext*)
jdsks -- Create LI list of setter functions. Uses same input-format as jdxcscx	{#insert zWordWrapOffFromTPDfltState}{#LOOP {#insert zzWWOffLinkNextLISetterWBelowSigLine} -count {#INPUT -head How many functions? (1+) -single}}{#insert zWordWrapOn}	jdsks
jdxcsc -- XBN-Java copy-cnstr 'set(to_copy.get())' JavaDoc list	{#MSGBOX -head set(to_copy.get()) JavaDoc list -text This generates the listing of what the copy-constructor does, where each item is a call to a setter, and is fed its corresponding getters. Such as  <<  setTrim(to_copy.doTrimLeft(), to_copy.doTrimRight())  >>  This translates each into a linkable <LI> item. The set~calls must be in the proper location in the JavaDoc block, indented as needed, in the <OL> tag (eliminate all semi~colons). Below the calls must be a DUPLICATE of each set~function's signature~line, **in the same order**. See jdxcscx for example input.}{#insert zWordWrapOffFromTPDfltState}{#insert zHOME}{#LOOP {#insert zTPLineDownExtend} -count {#INPUT -head How many functions? (1+) -single}}{#insert zRplcDlgOpenRE}{#SETPHRASE -description zvFIND_WHAT -content \b(\w+)\(\) -autotext zvFIND_WHAT -folder ctvv_folder}{#insert zvFIND_WHAT}{#insert zRplcFieldWith}{#SETPHRASE -description zvRPLC_WITH -content {@link #$1() $1\\\}() -autotext zvRPLC_WITH -folder ctvv_folder}{#insert zvRPLC_WITH}{#insert zRplcBtnAllSelHnrRAW}{#insert zRplcDlgCloseRE}{#insert zLEFT}{#LOOP {#insert zzWWOffLinkNextLISetterWBelowSigLine} -count {#INPUT -head How many functions? (1+) -single}}{#insert zWordWrapOn}	jdxcsc
jdxcscx -- jdxcsc example input	{#insert zTAB}<P>This calls<OL>{#insert zEnterTab}setTrim(to_copy.doTrimLeft(), to_copy.doTrimRight());{#insert zENTER}setVisible(to_copy.doVisible());{#insert zENTER}setPad(to_copy.doPad(), to_copy.getPad());{#insert zENTER}setChop(to_copy.doChop(), to_copy.getChop());{#insert zENTER}setPadChopFirst(to_copy.doPadFirst());{#insert zEnterBksp}public void setTrim(boolean b_left, boolean b_right)  {{#insert zEnterBksp}public void setVisible(boolean b_b)  {{#insert zEnterBksp}public void setPad(boolean b_on, PadString p_s)  {{#insert zEnterBksp}public void setChop(boolean b_on, ChopString c_s)  {{#insert zEnterBksp}public void setPadChopFirst(boolean b_padOrChop)  {{#insert zENTER}</OL></P>{#insert zENTER}	jdxcscx
xccg -- XBN-Java copy-cnstr: 'ThisClass(ThisClass to_copy)'	{#insert zXmark}{#insert zCopyCnstrSetClsNmAbrvXDown}{#insert zvFOBJ_NAME}{#insert zvPAP_stM}{#insert zzXbnCpCnstrParams_M_cnmPapGnr}{#insert zzXcgsyn_M_yon}	xccg
xccgoc -- Basic XBN-Java copy-cnstr and getObjectCopy(), JavaDoc and bodies	(*So the sig-param is NOT 'x':*){#insert zvPAP_stM}{#insert zXXbnCpCnstrSetClsNmAllParamsXDown}{#insert zXbnCopyCnstrJDAndBodySetCAbrv_M_cnmPrms}{#insert zENTER}{#insert zzXJ_getObjectCopyFunc_M_cnmPrmsGnr}{#insert zzXcgsyn_M_yon}	xccgoc
xccnstr -- Basic XBN-Java copy-cnstr, JavaDoc and body	(*So the sig-param is NOT 'x':*){#insert zvPAP_stM}{#insert zXXbnCpCnstrSetClsNmAllParamsXDown}{#insert zXbnCopyCnstrJDAndBodySetCAbrv_M_cnmPrms}{#insert zzXcgsyn_M_yon}	xccnstr
xcgsyn	{#BALLOON -title Syntax: XBN~Java copy~cnstr & goc() -text {#insert zzXcgsyns1of6}=Basic XBN~Java copy~cnstr & getObjectCopy() JavaDoc & bodies, {#insert zzXcgsyns2of6}=Sig only, {#insert zzXcgsyns3of6}=cc JD & body, {#insert zzXcgsyns4of6}=goc() JD & body  //  {#insert zzXcgsyns5of6}=set~call <LI> list ([x]=example input), {#insert zzXcgsyns6of6}  //  Link=xcksyn  //  xcgtestall  //  javasyn}	xcgsyn
xcgtestall	{#insert zFcsTPFileNew}{#insert zzDlgStartingTestSynOffWrn}{#insert zvSYNTAX_ON_stES}{#insert zzDemoJavaClassLine}xccg: {#insert xccg}{#insert zENTER2}--------xccgoc--------{#insert zENTER}{#insert xccgoc}--------xccnstr--------{#insert zENTER}{#insert xccnstr}--------xgocopy--------{#insert zENTER}{#insert xgocopy}{#insert zvSYNTAX_ON_stOn}{#insert zzXcgsyn_M_yon}	xcgtestall
xgocopy -- Basic XBN-Java getObjectCopy(), JavaDoc and body	(*So the class-abbrev is not prompted for:*){#insert zvPAP_stT}{#insert zXXbnCpCnstrSetClsNmAllParamsXDown}{#insert zzXJ_getObjectCopyFunc_M_cnmPrmsGnr}{#insert zzXcgsyn_M_yon}	xgocopy
zBalTHISClsAbrv	{#BALLOON -title Need THIS classes abbreviation! -text Need THIS classes abbreviation!}	zBalTHISClsAbrv
zCopyCnstrSetClsNmAbrvXDown -- Sets zvFOBJ_NAME, zvALL_PARAMS	{#insert zSetFObjNmSelCopyThisClass}{#insert zXDown}	zCopyCnstrSetClsNmAbrvXDown
zXXbnCpCnstrSetClsNmAllParamsXDown	{#insert zXmark}{#insert zCopyCnstrSetClsNmAbrvXDown}{#insert zvGENERICS_stPrompt_M_fom}{#insert zvALL_PARAMS_stXbnCpCnstrSigPrms_M_cnmPapGnr}	zXXbnCpCnstrSetClsNmAllParamsXDown
zXbnCopyCnstrJDAndBodySetCAbrv_M_cnmPrms -*- Needs zvFOBJ_NAME, zvALL_PARAMS	{#insert zzXJCopyCnstrJDBlockSetCAbrv_M_cnmPrms}{#insert zzXJCopyCnstrBody_M_cnmVPrms012}	zXbnCopyCnstrJDAndBodySetCAbrv_M_cnmPrms
zv012_st0	{#SETPHRASE -description zv012 -content 0 -autotext zv012 -folder ctvv_folder}	zv012_st0
zv012_st1	{#SETPHRASE -description zv012 -content 1 -autotext zv012 -folder ctvv_folder}	zv012_st1
zv012_st2	{#SETPHRASE -description zv012 -content 2 -autotext zv012 -folder ctvv_folder}	zv012_st2
zvALL_PARAMS_stXbnCpCnstrSigPrms_M_cnmPapGnr -- Needs zvFOBJ_NAME, set to THIS class, zvPAP	{#SETPHRASE -description zvALL_PARAMS -content {#insert zzXbnCpCnstrParams_M_cnmPapGnr} -autotext zvALL_PARAMS -folder ctvv_folder}	zvALL_PARAMS_stXbnCpCnstrSigPrms_M_cnmPapGnr
zzCallsSpr012Prompt	{#MSGBOX -head Calls super? -text Does this copy-constructor call its super-version? [Yes]=Calling super~copy~cnstr is the one and only step, [No]=First of multiple steps, [Cancel]=Does not call super -yes zv012_st1 -no zv012_st2 -cancel zv012_st0}	zzCallsSpr012Prompt
zzJDCallSpr1stStep	<P>This<OL>{#insert zEnterTab}<LI>Calls {#insert zXSetFObjNmToSuperClassXDownDel}{#insert zvDISPLAY_stQspr}{#insert zBalTHISClsAbrv}{#insert zvDRN_stR}{#SETPHRASE -description zvPAP -content m -autotext zvPAP -folder ctvv_folder}{#insert zvALL_PARAMS_stXbnCpCnstrSigPrms_M_cnmPapGnr}<CODE>{#insert zXbnCpCnstrLink_M_drnCnmPrmsDspPap}</CODE></LI>{#insert zENTER}<LI>{#insert zYmark}</LI>{#insert zEnterBksp}</OL></P>{#insert zENTER2}	zzJDCallSpr1stStep
zzJDCallSprOnlyStep	<P>Equal to{#insert zENTER}<BR> &nbsp; &nbsp; {#insert zXSetFObjNmToSuperClassXDownDel}{#insert zvDISPLAY_stQspr}{#insert zBalTHISClsAbrv}{#SETPHRASE -description zvPAP -content m -autotext zvPAP -folder ctvv_folder}{#insert zvALL_PARAMS_stXbnCpCnstrSigPrms_M_cnmPapGnr}<CODE>{#insert zvDRN_stR}{#insert zXbnCpCnstrLink_M_drnCnmPrmsDspPap}</CODE></P>{#insert zENTER2}	zzJDCallSprOnlyStep
zzQx	x	zzQx
zzSetClsVToPrompt_M_cnm	{#SETPHRASE -description zvFOBJ_ABRV -content {#INPUT -head Abbreviation for class '{#insert zvFOBJ_NAME}'? -def {#insert zvFOBJ_ABRV} -single} -autotext zvFOBJ_ABRV -folder ctvv_folder}	zzSetClsVToPrompt_M_cnm
zzWWOffLinkNextLISetterWBelowSigLine -*-	{#insert zGT1stNonWSCharInLine}<LI><CODE>{#insert zTPSelectR1w}{#insert zXmark}{#insert zTMFindNextJavaFuncSigLine}{#insert zJFSigLineSlctd_selCopyEntireSig}{#insert zTPDeleteLine}{#insert zXUpDelete}{#insert zSigInCBSetFuncNmSetCIBParams}{#insert zvDRN_stH}{#insert zvPAP_stT}{#insert z1PPFuncLinkDispFNm_M_drnFnmPrmsPap}{#insert zEND}</CODE></LI>{#insert zDOWN}	zzWWOffLinkNextLISetterWBelowSigLine
zzXJCopyCnstrBodyNoSprCall_M_cnmVPrms	try  {{#insert zENTER}{#insert zYmark} = to_copy.{#insert zYmark};{#insert zENTER}\\\}  catch(RuntimeException rx)  {{#insert zENTER}throw  CrashIfObject.nullOrReturnCause(to_copy, {#insert zAscQQ}to_copy{#insert zAscQQ}, null, rx);{#insert zENTER}\\\}	zzXJCopyCnstrBodyNoSprCall_M_cnmVPrms
zzXJCopyCnstrBodySprCall1st_M_cnmVPrms	{#insert zzXJCopyCnstrBodySprCallOnly_M_cnmVPrms}{#insert zENTER}{#insert zYmark} = to_copy.{#insert zYmark};	zzXJCopyCnstrBodySprCall1st_M_cnmVPrms
zzXJCopyCnstrBodySprCallOnly_M_cnmVPrms	super(to_copy);	zzXJCopyCnstrBodySprCallOnly_M_cnmVPrms
zzXJCopyCnstrBody_M_cnmVPrms012 -*- Needs zvFOBJ_NAME, zvALL_PARAMS, zv012	public {#insert zvFOBJ_NAME}{#insert zvALL_PARAMS}  {{#insert zENTER}{#insert {#COND -if {#insert zv012} = 0 -then zzXJCopyCnstrBodyNoSprCall_M_cnmVPrms -else {#COND -if {#insert zv012} = 1 -then zzXJCopyCnstrBodySprCallOnly_M_cnmVPrms -else zzXJCopyCnstrBodySprCall1st_M_cnmVPrms}}}{#insert zENTER}\\\}	zzXJCopyCnstrBody_M_cnmVPrms012
zzXJCopyCnstrJDBlockSetCAbrv_M_cnmPrms -*- Needs zvFOBJ_NAME, zvALL_PARAMS	(*If the super-copy-constructor is called, then zvFOBJ_NAME **and** zvALL_PARAMS are overwritten. Save and then restore both:*){#SETPHRASE -description zvTHIS_CLS_NM -content {#insert zvFOBJ_NAME} -autotext zvTHIS_CLS_NM -folder ctvv_folder}{#SETPHRASE -description zvTHIS_CC_PRMS -content {#insert zvALL_PARAMS} -autotext zvTHIS_CC_PRMS -folder ctvv_folder}/**{#insert zEnterTab}<P>Create a new instance as a duplicate of another.</P>{#insert zENTER2}{#insert zzCallsSpr012Prompt}{#insert {#COND -if {#insert zv012} = 1 -then zzJDCallSprOnlyStep -else {#COND -if {#insert zv012} = 2 -then zzJDCallSpr1stStep -else z1slp}}}@param  to_copy  May not be <CODE>null</CODE>.{#insert zENTER}@see  #getObjectCopy(){#insert zEnterBksp} **/{#insert zEnterBksp}(*Restore:*){#SETPHRASE -description zvALL_PARAMS -content {#insert zvTHIS_CC_PRMS} -autotext zvALL_PARAMS -folder ctvv_folder}{#SETPHRASE -description zvFOBJ_NAME -content {#insert zvTHIS_CLS_NM} -autotext zvFOBJ_NAME -folder ctvv_folder}	zzXJCopyCnstrJDBlockSetCAbrv_M_cnmPrms
zzXJ_getObjCp_func_M_cnmPrmsGnr -*- Needs zvFOBJ_NAME, zvALL_PARAMS	public {#insert zvFOBJ_NAME}{#insert zGenericsInSharpsIfNotES_M_gnr} getObjectCopy()  {{#insert zENTER}return  (new {#insert zvFOBJ_NAME}{#insert zGenericsInSharpsIfNotES_M_gnr}(this));{#insert zENTER}\\\}	zzXJ_getObjCp_func_M_cnmPrmsGnr
zzXJ_getObjCp_jd_M_cnmPrmsGnr	/**{#insert zEnterTab}<P>Duplicate this <CODE>{#insert zvFOBJ_NAME}</CODE>.</P>{#insert zENTER2}@return  <CODE>(new {#insert zvDISPLAY_stFncObjNm}{#insert zvDRN_stH}{#insert z1PPFuncLinkThrClsATag_M_drnFnmPrmsDsp}{#insert zGenericsInHEscSharpsIfNotES_M_gnr}(this))</CODE>{#insert zEnterBksp} **/{#insert zEnterBksp}	zzXJ_getObjCp_jd_M_cnmPrmsGnr
zzXJ_getObjectCopyFunc_M_cnmPrmsGnr	{#insert zzXJ_getObjCp_jd_M_cnmPrmsGnr}{#insert zzXJ_getObjCp_func_M_cnmPrmsGnr}	zzXJ_getObjectCopyFunc_M_cnmPrmsGnr
zzXbnCpCnstrParamNmWPrompt_M_cnm -- Needs zvFOBJ_NAME, set to THIS class	to_copy	zzXbnCpCnstrParamNmWPrompt_M_cnm
zzXbnCpCnstrParams_M_cnmPapGnr -- Needs zvFOBJ_NAME=THIS class, zvGENERICS, zvPAP	({#insert zvFOBJ_NAME}{#insert zGenericsInSharpsIfNotES_M_gnr} {#insert {#COND -if {#insert zvPAP} = t -then zzQx -else {#COND -if {#insert zvPAP} = y -then zzQx -else zzXbnCpCnstrParamNmWPrompt_M_cnm}}})	zzXbnCpCnstrParams_M_cnmPapGnr
zzXcgsyn_M_yon	{#insert {#COND -if {#insert zvSYNTAX_ON} = on -then xcgsyn -else z1slp}}	zzXcgsyn_M_yon
zzXcgsyns1of6	xccg	zzXcgsyns1of6
zzXcgsyns2of6	xccgoc	zzXcgsyns2of6
zzXcgsyns3of6	xccnstr	zzXcgsyns3of6
zzXcgsyns4of6	xgocopy	zzXcgsyns4of6
zzXcgsyns5of6	jdxcsc[x]	zzXcgsyns5of6
zzXcgsyns6of6	jdsks	zzXcgsyns6of6
