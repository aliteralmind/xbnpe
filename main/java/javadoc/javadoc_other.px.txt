__XBN-PhraseExpress is released under the LGPL 2.1	(*XBN-PhraseExpress is a large set of generically-useful Microsoft Windows scripting tools, written in PhraseExpress, using the plain-text editor TextPad as its foundation.  //  Copyright (C) 2013 Jeff Epstein  //  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  //  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.  //  You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA*)		(*Two tabs plus this comment, to force this phrase to be (a) imported, and (b) with NO autotext*)
hcfb -- Func-name in clipboard to {@code func()}	{#insert zzPastePPCdd}{#insert jdqtsyn}	hcfb
hcfl -- Func-name word-left to {@code func()}	{#insert zCutL1w}{#insert zzPastePPCdd}{#insert jdqtsyn}	hcfl
jdqt -- <P>Equal to\n &nbsp; &nbsp; <CODE>...</CODE></P>	{#insert zzPEqlToThrOpenCode}{#insert zYmark}</CODE></P>{#insert zYUp}{#insert zzJdqtsyn_M_yon}	jdqt
jdqta -- jdqt, duplicate ONLY func body-line to it	{#BALLOON -title WARNING -text It is expected that 'Extend selection' (XS) is NOT checked, and that the ONLY line of code in this function is a non~return line (no empty~lines).}{#insert zzPEqlToThrOpenCode}{#insert zXmark}{#insert zTMFindNextJavaFuncSigLine}(*{#insert zXUpPaste}*){#insert zRIGHT}{#insert zMoveR1L1w}{#insert zFindDlgOpenDown}{#SETPHRASE -description zvFIND_WHAT -content ; -autotext zvFIND_WHAT -folder ctvv_folder}{#insert zvFIND_WHAT}{#insert zFindXSBtnNextXS}{#insert zFindDlgCloseWS}{#insert zTPSelectL1c}{#insert zTPCopy}{#insert zHtmlEscLTGTQQInCB}{#insert zXUpRight}{#insert zTPPaste}</CODE></P>{#insert zXUpDelete}{#insert zTPSelectR1w}{#insert zzJdqtsyn_M_yon}	jdqta
jdqtsyn	{#BALLOON -title Syntax: JavaDoc snippets -text jdqt[a]=<P>=to.. ([a]=dup ONLY [non~returning!] func line), jdtho[a]=Steps ([a]=line1 -> step1), hcf[b,l]=CODE func~nm to [l]eft or in C[b] w/ '()', p[c]fn[s][b[b]]=Copy cls#func ([b]=sig in CB, [bb]=then paste) // javasyn}	jdqtsyn
jdtho -- This... (steps executed <OL> list)	{#insert zzJdthoThrOpenLI}{#insert zXmark}{#insert zzJdthoClsLIToClsPXUp}	jdtho
jdthoa -- jdtho, step 1 is the first line in the function	{#insert zzJdthoThrOpenLI}{#insert zXmark}{#insert zXmarkJCoded}{#insert zzJFuncDownGTBodyLine1Char1}{#insert zSelCopyTrimThrLineEndNotLastCharWWWarn}{#insert zXUpPaste}{#insert zRIGHT}</LI>{#insert zENTER}<LI>{#insert zYmark}{#insert zzJdthoClsLIToClsPXUp}	jdthoa
pcfn -- Copy Class#funcName with cursor immediately-post paren (bracket)	{#insert zPostBracketGTP}{#insert zSelectL2w}{#insert zSelectL1wCopy}{#insert zRIGHT}{#insert zPreBracketGTP}{#insert zzJdqtsyn_M_yon}	pcfn
pfn -- Copy function name with cursor immediately-post paren (bracket)	{#insert zPostBrkctGTPCopyWordLeftGTP}{#insert zzJdqtsyn_M_yon}	pfn
pfnb -- Copy function name from funcName(params) in clipboard	{#SETTEMP -name zvSIG -content {#INSERTCLIPBOARD}}{#SETCLIPBOARD {#SUBSTR {#INSERTCLIPBOARD} -from 0 -count {#CALC {#POS {#INSERTCLIPBOARD} -substr (} - 1 -round 0 -thousands none}}}{#BALLOON -title pfnb -text Function name copied from signature originally in clipboard. New={#insert zAscQQ}{#INSERTCLIPBOARD}{#insert zAscQQ}. Original={#insert zAscQQ}{#GETTEMP -name zvSIG}{#insert zAscQQ}  //  jdqtsyn}	pfnb
pfnbb -- pfnb, paste	{#insert pfnb}{#insert zTPPaste}	pfnbb
pfns -- pfn, space paste	{#insert pfn} {#insert zTPPaste}	pfns
pfnsb -- pfnb, space paste	{#insert pfnb} {#insert zTPPaste}	pfnsb
zzJDHtmlSlcMainFuncMarker	<!-- MAIN FUNCTION -->	zzJDHtmlSlcMainFuncMarker
zzJdqtsyn_M_yon -- Needs zvSYNTAX_ON	{#insert {#COND -if {#insert zvSYNTAX_ON} = on -then jdqtsyn -else z1slp}}	zzJdqtsyn_M_yon
zzJdseFHThrRtrnLnkSeeColonSpc	{#insert zzJdsemPreRtnLink}{#insert zENTER}{#BALLOON -title Return~link for sub~funcs -text Return~link for sub~funcs}<P><I><B>See:</B> (*ends w spc*)	zzJdseFHThrRtrnLnkSeeColonSpc
zzJdsemPreRtnLink	<!-- MAIN FUNCTION -->{#insert zENTER2}<P><I><B>See:</B></I><UL>{#insert zEnterTab}<LI><I>{#insert zYmark}</I></LI>{#insert zENTER}<LI><A HREF={#insert zAscQQ}#mainfuncs{#insert zAscQQ}>All main functions</A></LI>{#insert zEnterBksp}</UL></P>{#insert zENTER}	zzJdsemPreRtnLink
zzJdthoClsLIToClsPXUp	</LI>{#insert zEnterBksp}</OL></P>{#insert zXUp}	zzJdthoClsLIToClsPXUp
zzJdthoThrOpenLI	<P>This<OL>{#insert zEnterTab}<LI>	zzJdthoThrOpenLI
zzNextMainJFuncMvBkmkToSigLn	{#insert zTPBookmarkGTNext}{#insert zTPBookmarkToggle}{#insert zTMFindNextJavaFuncSigLine}{#insert zLEFT}{#insert zTPBookmarkToggle}	zzNextMainJFuncMvBkmkToSigLn
zzPEqlToThrOpenCode	<P>Equal to{#insert zENTER}<BR> &nbsp; &nbsp; <CODE>	zzPEqlToThrOpenCode
zzPastePPCdd	{@code {#insert zTPPaste}()}	zzPastePPCdd
