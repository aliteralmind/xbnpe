
__XBN-PhraseExpress is released under the LGPL 2.1	(*XBN-PhraseExpress is a large set of generically-useful Microsoft Windows scripting tools, written in PhraseExpress, using the plain-text editor TextPad as its foundation.  //  Copyright (C) 2013 Jeff Epstein  //  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  //  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.  //  You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA*)		(*Two tabs plus this comment, to force this phrase to be (a) imported, and (b) with NO autotext*)
fal -- Sig up: Alter-paste func-name at cursor	{#insert zzFNmSetLCAltrCddFromL1cGPNToPrev}{#insert zXPasteAltrFNmFrom1PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFalsyn_M_yon}	fal
fal2 -- fal, 2 sigs up	{#insert zzFNmSetLCAltrCddFromL1cGPNToPrev}{#insert zXPasteAltrFNmFrom2PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFalsyn_M_yon}	fal2
fal3 -- fal, 3 sigs up	{#insert zzFNmSetLCAltrCddFromL1cGPNToPrev}{#insert zXPasteAltrFNmFrom3PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFalsyn_M_yon}	fal3
fal4 -- fal, 4 sigs up	{#insert zzFNmSetLCAltrCddFromL1cGPNToPrev}{#insert zXPasteAltrFNmFrom4PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFalsyn_M_yon}	fal4
fal5 -- fal, 5 sigs up	{#insert zzFNmSetLCAltrCddFromL1cGPNToPrev}{#insert zXPasteAltrFNmFrom5PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFalsyn_M_yon}	fal5
fallinksyn	{#BALLOON -title Syntax: [h,i,d,r,n]kfal -text Create a link to the requested function name. Requires a target~class pre~option: [h]=target~function is in THIS class, [i]=tgt diff~class (file), same package (dir), [d]=diff pkg, [r]=super~class, [n]=constructor~class (class=func~name)  //  falsyn}	fallinksyn
faln -- fal, [prompt-#] sigs up	{#insert zzFNmSetLCAltrCddFromL1cGPNToPrev}{#insert zXPasteAltrFNmFromPrmptNumPrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFalsyn_M_yon}	faln
faloptsyn	{#BALLOON -title fal non~link options -text {#insert zzFalsyns2of4} // {#insert zzFalsyns3of4} // [c]=CODE~d, [+]={#insert zAscQQ}+F()+{#insert zAscQQ}, \=\{#insert zAscQQ}[+]\{#insert zAscQQ}, _: F()=[\], [d]=F(...), [o]=&qt;F&qt;, [p]=F(), [n]=F();, [r]=F({#insert zAscQQ}{#insert zAscQQ});, [s]='F', [capitalized]=CODE~d  //  Examples: afal2, +fazn  //  falsyn}	faloptsyn
falsyn	{#BALLOON -title Syntax: Alter~paste func~nm from sig -text Alter~paste func~name from neighboring sig // {#insert zzFalsyns2of4}  and  {#insert zzFalsyns3of4}: faloptsyn // {#insert zzFalsyns4of4}=Link to target cls (fallinksyn) // [l]=sig up, [z]=down, [[2~5,n]]=2nd/3rd/n~th // felsyn // javasyn}	falsyn
faz -- Sig down: Alter-paste func-name at cursor	{#insert zzFNmSetLCAltrCddFromL1cGPNToNext}{#insert zXPasteAltrFNmFrom1PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFalsyn_M_yon}	faz
faz2 -- faz, 2 sigs down	{#insert zzFNmSetLCAltrCddFromL1cGPNToNext}{#insert zXPasteAltrFNmFrom2PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFalsyn_M_yon}	faz2
faz3 -- faz, 3 sigs down	{#insert zzFNmSetLCAltrCddFromL1cGPNToNext}{#insert zXPasteAltrFNmFrom3PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFalsyn_M_yon}	faz3
faz4 -- faz, 4 sigs down	{#insert zzFNmSetLCAltrCddFromL1cGPNToNext}{#insert zXPasteAltrFNmFrom4PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFalsyn_M_yon}	faz4
faz5 -- faz, 5 sigs down	{#insert zzFNmSetLCAltrCddFromL1cGPNToNext}{#insert zXPasteAltrFNmFrom5PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFalsyn_M_yon}	faz5
fazn -- faz, [prompt-#] sigs down	{#insert zzFNmSetLCAltrCddFromL1cGPNToNext}{#insert zXPasteAltrFNmFromPrmptNumPrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFalsyn_M_yon}	fazn
fel -- Sig up: Paste func-name at cursor	{#insert zzJFSigUpGetPasteFuncName}{#insert zzFelsyn_M_yon}	fel
fel2 -- fel, 2 sigs up	{#insert zzSetCddLltrToES}{#insert zvGPRV_NXT_stPrev}{#insert zXPasteAltrFNmFrom2PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFelsyn_M_yon}	fel2
fel3 -- fel, 3 sigs up	{#insert zzSetCddLltrToES}{#insert zvGPRV_NXT_stPrev}{#insert zXPasteAltrFNmFrom3PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFelsyn_M_yon}	fel3
fel4 -- fel, 4 sigs up	{#insert zzSetCddLltrToES}{#insert zvGPRV_NXT_stPrev}{#insert zXPasteAltrFNmFrom4PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFelsyn_M_yon}	fel4
fel5 -- fel, 5 sigs up	{#insert zzSetCddLltrToES}{#insert zvGPRV_NXT_stPrev}{#insert zXPasteAltrFNmFrom5PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFelsyn_M_yon}	fel5
feln -- fel, [prompt-#] sigs up	{#insert zzSetCddLltrToES}{#insert zvGPRV_NXT_stPrev}{#insert zXPasteAltrFNmFromPrmptNumPrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFelsyn_M_yon}	feln
felsyn	{#BALLOON -title Syntax: Get~paste func~nm from sig -text {#insert zzFalsyns1of4}=Paste function~name from neighboring signature at cursor. [l]=sig up, [z]=down, [[2~5,n]]=2nd,3rd,...,[prompt #]~th  //  feltestall  //  Paste with alteration: falsyn  //  javasyn}	felsyn
feltestall	{#insert zzzJavaTestIntroFileNewTest3SigsGTTop}{#SETPHRASE -description zvLC_ALTR2 -content {#INPUT -head Alter opt?: [c,+,\,_]or[d,[h,i,d,r,n]k,o,q,p,r,n,s] (see faloptsyn) -def c -single} -autotext zvLC_ALTR2 -folder ctvv_folder}fez: {#insert fez}{#insert zENTER}fez2: {#insert fez2}{#insert zENTER}fez3: {#insert fez3}{#insert zENTER}fezn: {#insert fezn}{#insert zzzEnterLcAltr2}faz: {#insert zzzLltr2}{#insert faz}{#insert zzzEnterLcAltr2}faz2: {#insert zzzLltr2}{#insert faz2}{#insert zzzEnterLcAltr2}faz3: {#insert zzzLltr2}{#insert faz3}{#insert zzzEnterLcAltr2}fazn: {#insert zzzLltr2}{#insert fazn}{#insert zENTER}{#insert zTPGTDocBottom}{#insert zzzLltr2_stES}fel: {#insert fel}{#insert zENTER}fel2: {#insert fel2}{#insert zENTER}fel3: {#insert fel3}{#insert zENTER}feln: {#insert feln}{#insert zzzEnterLcAltr2}fal: {#insert zzzLltr2}{#insert fal}{#insert zzzEnterLcAltr2}fal2: {#insert zzzLltr2}{#insert fal2}{#insert zzzEnterLcAltr2}fal3: {#insert zzzLltr2}{#insert fal3}{#insert zzzEnterLcAltr2}faln: {#insert zzzLltr2}{#insert faln}{#insert zENTER}{#insert zvSYNTAX_ON_stOn}{#insert zzFelsyn_M_yon}{#sleep 2500}{#insert zzFalsyn_M_yon}	feltestall
fez -- Sig down: Paste func-name at cursor	{#insert zzSetCddLltrToESGpnToNext}{#insert zXPasteAltrFNmFrom1PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFelsyn_M_yon}	fez
fez2 -- fez, 2 sigs down	{#insert zzSetCddLltrToESGpnToNext}{#insert zXPasteAltrFNmFrom2PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFelsyn_M_yon}	fez2
fez3 -- fez, 3 sigs down	{#insert zzSetCddLltrToESGpnToNext}{#insert zXPasteAltrFNmFrom3PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFelsyn_M_yon}	fez3
fez4 -- fez, 4 sigs down	{#insert zzSetCddLltrToESGpnToNext}{#insert zXPasteAltrFNmFrom4PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFelsyn_M_yon}	fez4
fez5 -- fez, 5 sigs down	{#insert zzSetCddLltrToESGpnToNext}{#insert zXPasteAltrFNmFrom5PrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFelsyn_M_yon}	fez5
fezn -- fez, [prompt-#] sigs down	{#insert zzSetCddLltrToESGpnToNext}{#insert zXPasteAltrFNmFromPrmptNumPrvNxtJFSigAtX_M_cdeGpnWycAltr}{#insert zzFelsyn_M_yon}	fezn
z0PFuncLinkDispFNm_M_cbfnmDrn -*-	{#insert zvFOBJ_NAME_stCB}{#insert z0PFuncLinkDispFNm_M_fnmDrn}	z0PFuncLinkDispFNm_M_cbfnmDrn
zFNmInCBAlterPaste_M_lltr -*- zvLC_ALTR (lowercase and not 'c')	{#insert {#COND -if {#LENGTH {#insert zvLC_ALTR}} = 0 -then zTPPaste -else {#COND -if {#insert zvLC_ALTR} = d -then zzPasteParenDDDParen -else {#COND -if {#insert zvLC_ALTR} = k -then z0PFuncLinkDispFNm_M_cbfnmDrn -else {#COND -if {#insert zvLC_ALTR} = n -then zzPastePPSClnLeft2 -else {#COND -if {#insert zvLC_ALTR} = o -then zzQQPasteQQHtmlEsc -else {#COND -if {#insert zvLC_ALTR} = p -then zzPastePPLeft -else {#COND -if {#insert zvLC_ALTR} = q -then zzQQPasteQQ_M_cde -else {#COND -if {#insert zvLC_ALTR} = r -then zzPastePQQPSClnLeft3 -else {#COND -if {#insert zvLC_ALTR} = s -then zzQPasteQ -else {#COND -if {#insert zvLC_ALTR} = + -then zzQPlsPastePlsQ -else {#COND -if {#insert zvLC_ALTR} = \ -then zzLQQPlsPastePlsQLQ -else {#COND -if {#insert zvLC_ALTR} = _ -then zzFNmPPEqlsLQQPlsPastePlsQLQ -else zzErrDlgBadParamAltrFlag_M_lltr}}}}}}}}}}}}}	zFNmInCBAlterPaste_M_lltr
zSelCopyFuncNmInPrvNxtJavaSig_M_gpnWyc -*-	{#insert zSelectPrvNxtJavaFuncSigLine_M_gpnWyc}{#insert zJFSigLineSlctd_selCopyFuncName}	zSelCopyFuncNmInPrvNxtJavaSig_M_gpnWyc
zXPasteAltrFNmFrom1PrvNxtJFSigAtX_M_cdeGpnWycAltr	{#insert zvAWAY_CNT_st1}{#insert zXPasteAltrFNmFromPrvNxtJFSigAtX_M_cdeGpnWycAltr}	zXPasteAltrFNmFrom1PrvNxtJFSigAtX_M_cdeGpnWycAltr
zXPasteAltrFNmFrom2PrvNxtJFSigAtX_M_cdeGpnWycAltr	{#insert zvAWAY_CNT_st2}{#insert zXPasteAltrFNmFromPrvNxtJFSigAtX_M_cdeGpnWycAltr}	zXPasteAltrFNmFrom2PrvNxtJFSigAtX_M_cdeGpnWycAltr
zXPasteAltrFNmFrom3PrvNxtJFSigAtX_M_cdeGpnWycAltr	{#insert zvAWAY_CNT_st3}{#insert zXPasteAltrFNmFromPrvNxtJFSigAtX_M_cdeGpnWycAltr}	zXPasteAltrFNmFrom3PrvNxtJFSigAtX_M_cdeGpnWycAltr
zXPasteAltrFNmFrom4PrvNxtJFSigAtX_M_cdeGpnWycAltr	{#insert zvAWAY_CNT_st4}{#insert zXPasteAltrFNmFromPrvNxtJFSigAtX_M_cdeGpnWycAltr}	zXPasteAltrFNmFrom4PrvNxtJFSigAtX_M_cdeGpnWycAltr
zXPasteAltrFNmFrom5PrvNxtJFSigAtX_M_cdeGpnWycAltr	{#insert zvAWAY_CNT_st5}{#insert zXPasteAltrFNmFromPrvNxtJFSigAtX_M_cdeGpnWycAltr}	zXPasteAltrFNmFrom5PrvNxtJFSigAtX_M_cdeGpnWycAltr
zXPasteAltrFNmFromPrmptNumPrvNxtJFSigAtX_M_cdeGpnWycAltr	{#insert zvAWAY_CNT_stPrompt}{#insert zXPasteAltrFNmFromPrvNxtJFSigAtX_M_cdeGpnWycAltr}	zXPasteAltrFNmFromPrmptNumPrvNxtJFSigAtX_M_cdeGpnWycAltr
zXPasteAltrFNmFromPrvNxtJFSigAtX_M_cdeGpnWycAltr -*-	{#insert zzXmarkMaybeJDOrNotJDCdd_M_cdeLltr}{#insert zSelCopyFuncNmInPrvNxtJavaSig_M_gpnWyc}{#insert zXUpDownOppositeDir_M_gpn}{#insert zFNmInCBAlterPaste_M_lltr}{#insert zzB4EndAtCodeRightIfCdd_M_cde}	zXPasteAltrFNmFromPrvNxtJFSigAtX_M_cdeGpnWycAltr
zzErrDlgFnmLltr_M_lltr	{#MSGBOX -head ERROR -text ERROR ~~ The alteration pre~option (currently zvLC_ALTR='{#insert zvLC_ALTR}') must be one of the following: [c,+,\,_]or[d,k,o,q,p,r,n,s] (see faloptsyn){#insert zCancelProcNowPostTxt}  //  {#insert zzAltrFlagPrgrmrNoteTxt}{#insert zCancelProcNowPostTxt}}	zzErrDlgFnmLltr_M_lltr
zzFNmPPEqlsLQQPlsPastePlsQLQ	{#insert zTPPaste}()={#insert zzLQQPlsPastePlsQLQ}	zzFNmPPEqlsLQQPlsPastePlsQLQ
zzFNmSetLCAltrCddFromL1c	{#insert zCutL1c}{#insert {#COND -if {#INSERTCLIPBOARD} = c -then zzSetCddToCddLltrToES -else {#COND -if {#insert zLowercaseCB} = d -then zzParamSetLltrCddIfUFrmCB -else {#COND -if {#insert zLowercaseCB} = k -then zzParamSetLltrCddIfUFrmCBDrnToL1c -else {#COND -if {#insert zLowercaseCB} = n -then zzParamSetLltrCddIfUFrmCB -else {#COND -if {#insert zLowercaseCB} = o -then zzParamSetLltrCddIfUFrmCB -else {#COND -if {#insert zLowercaseCB} = p -then zzParamSetLltrCddIfUFrmCB -else {#COND -if {#insert zLowercaseCB} = q -then zzParamSetLltrCddIfUFrmCB -else {#COND -if {#insert zLowercaseCB} = r -then zzParamSetLltrCddIfUFrmCB -else {#COND -if {#insert zLowercaseCB} = s -then zzParamSetLltrCddIfUFrmCB -else {#COND -if {#INSERTCLIPBOARD} = + -then zzSetLltrToCBCddToES -else {#COND -if {#INSERTCLIPBOARD} = \ -then zzSetLltrToCBCddToES -else {#COND -if {#INSERTCLIPBOARD} = _ -then zzSetLltrToCBCddToES -else zzErrDlgFnmLltr_M_lltr}}}}}}}}}}}}}	zzFNmSetLCAltrCddFromL1c
zzFNmSetLCAltrCddFromL1cGPNToNext	{#insert zzFNmSetLCAltrCddFromL1c}{#insert zvGPRV_NXT_stNext}	zzFNmSetLCAltrCddFromL1cGPNToNext
zzFNmSetLCAltrCddFromL1cGPNToPrev	{#insert zzFNmSetLCAltrCddFromL1c}{#insert zvGPRV_NXT_stPrev}	zzFNmSetLCAltrCddFromL1cGPNToPrev
zzFalsyn_M_yon -- Needs zvSYNTAX_ON	{#insert {#COND -if {#insert zvSYNTAX_ON} = on -then falsyn -else z1slp}}	zzFalsyn_M_yon
zzFalsyns1of4	fe[l,z][[2~5,n]]	zzFalsyns1of4
zzFalsyns2of4	[c,+,\,_]fa[l,z][[2~5,n]]	zzFalsyns2of4
zzFalsyns3of4	[d,o,q,p,r,n,s]fa[l,z][[2~5,n]]	zzFalsyns3of4
zzFalsyns4of4	[h,i,d,r,n]kfa[l,z][[2~5,n]]	zzFalsyns4of4
zzFelsyn_M_yon -- Needs zvSYNTAX_ON	{#insert {#COND -if {#insert zvSYNTAX_ON} = on -then felsyn -else z1slp}}	zzFelsyn_M_yon
zzJFSigUpGetPasteFuncName -*-	{#insert zzSetCddLltrToES}{#insert zvGPRV_NXT_stPrev}{#insert zXPasteAltrFNmFrom1PrvNxtJFSigAtX_M_cdeGpnWycAltr}	zzJFSigUpGetPasteFuncName
zzLQQPlsPastePlsQLQ	\{#insert zAscQQ}{#insert zzQPlsPastePlsQ}\{#insert zAscQQ}	zzLQQPlsPastePlsQLQ
zzParamSetLltrCddIfUFrmCBDrnToL1c	{#insert zzParamSetLltrCddIfUFrmCB}{#insert zvDRN_stL1c}	zzParamSetLltrCddIfUFrmCBDrnToL1c
zzPastePPLeft -(*!*)-	(*Turns coded off, so zzB4EndAtCodeRightIfCdd_M_cde does NOT go to the other side of </CODE> (when indeed coded).*){#insert zTPPaste}(){#insert zLEFT}{#insert zvJCD_ES_stES}	zzPastePPLeft
zzPastePPSClnLeft2 -- See zzPastePPLeft internal comment	{#insert zTPPaste}();{#insert zLEFT2}{#insert zvJCD_ES_stES}	zzPastePPSClnLeft2
zzPastePQQPSClnLeft3 -- See zzPastePPLeft internal comment	{#insert zTPPaste}({#insert zAscQQ}{#insert zAscQQ});{#insert zLEFT3}{#insert zvJCD_ES_stES}	zzPastePQQPSClnLeft3
zzPasteParenDDDParen	{#insert zTPPaste}(...)	zzPasteParenDDDParen
zzQPasteQ	'{#insert zTPPaste}'	zzQPasteQ
zzQPlsPastePlsQ	{#insert zAscQQ} + {#insert zTPPaste}() + {#insert zAscQQ}	zzQPlsPastePlsQ
zzQQPasteQQHtmlEsc	&quot;{#insert zTPPaste}&quot;	zzQQPasteQQHtmlEsc
zzQQPasteQQ_M_cde	{#insert zQQOrQQHtmlIfCdd_M_cde}{#insert zTPPaste}{#insert zQQOrQQHtmlIfCdd_M_cde}	zzQQPasteQQ_M_cde
zzSetCddLltrToESGpnToNext	{#insert zzSetCddLltrToES}{#insert zvGPRV_NXT_stNext}	zzSetCddLltrToESGpnToNext
zzSetLltrToCBCddToES	{#SETPHRASE -description zvLC_ALTR -content {#INSERTCLIPBOARD} -autotext zvLC_ALTR -folder ctvv_folder}{#insert zvJCD_ES_stES}	zzSetLltrToCBCddToES
zzXmarkMaybeJDOrNotJDCdd_M_cdeLltr	{#insert {#COND -if {#insert zvLC_ALTR} = k -then {#COND -if {#insert zvJCD_ES} = JCoded -then zXmarkCoded -else zXmarkMaybeJDCdd_M_cde} -else zXmarkMaybeJDCdd_M_cde}}	zzXmarkMaybeJDOrNotJDCdd_M_cdeLltr
zzzEnterLcAltr2	{#insert zENTER}{#insert zzzLltr2}	zzzEnterLcAltr2
zzzSetCddESToCodedPrintCddXm