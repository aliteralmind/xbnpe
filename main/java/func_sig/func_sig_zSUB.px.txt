__XBN-PhraseExpress is released under the LGPL 2.1	(*XBN-PhraseExpress is a large set of generically-useful Microsoft Windows scripting tools, written in PhraseExpress, using the plain-text editor TextPad as its foundation.  //  Copyright (C) 2013 Jeff Epstein  //  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  //  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.  //  You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA*)		(*Two tabs plus this comment, to force this phrase to be (a) imported, and (b) with NO autotext*)
zHtmlEscJavaGenericsPostAllParams -*-	{#insert zPostBracketSelect}{#insert zHtmlEscSlctdJavaGenerics}{#insert zRIGHT}	zHtmlEscJavaGenericsPostAllParams
zHtmlEscSlctdJavaGenerics -*- Fails if no generics selected!	{#insert zRplcDlgOpenMCOnly}{#SETPHRASE -description zvFIND_WHAT -content < -autotext zvFIND_WHAT -folder ctvv_folder}{#insert zvFIND_WHAT}{#insert zRplcFieldWith}{#SETPHRASE -description zvRPLC_WITH -content &lt; -autotext zvRPLC_WITH -folder ctvv_folder}{#insert zvRPLC_WITH}{#insert zRplcBtnAllSel}{#SETPHRASE -description zvFIND_WHAT -content > -autotext zvFIND_WHAT -folder ctvv_folder}{#insert zvFIND_WHAT}{#insert zRplcFieldWith}{#SETPHRASE -description zvRPLC_WITH -content &gt; -autotext zvRPLC_WITH -folder ctvv_folder}{#insert zvRPLC_WITH}{#insert zRplcBtnAllSel}{#insert zRplcDlgClose}	zHtmlEscSlctdJavaGenerics
zJavaPostAllParamsDelNmsGncrsOnly -*-	{#insert zJavaPostAllParamsSelDelNamesOnly}{#insert zRIGHT}	zJavaPostAllParamsDelNmsGncrsOnly
zJavaPostAllParamsDelNmsOnlyThenHEsc	{#insert zJavaPostAllParamsSelDelNamesOnly}{#insert zHtmlEscSlctdJavaGenerics}	zJavaPostAllParamsDelNmsOnlyThenHEsc
zJavaPostAllParamsSelDelNamesOnly	{#insert zPostBracketSelect}{#insert zTMJavaDelNmsOnlyFromSlctdParams}	zJavaPostAllParamsSelDelNamesOnly
zPostAllParamsKeepDelRqstd_M_ang -*- Needs zvANG	{#insert {#COND -if {#insert zvANG} = a -then z1slp -else {#COND -if {#insert zvANG} = A -then zHtmlEscJavaGenericsPostAllParams -else {#COND -if {#insert zvANG} = n -then zJavaPostAllParamsDelTypes -else {#COND -if {#insert zvANG} = g -then zJavaPostAllParamsDelNmsGncrsOnly -else {#COND -if {#insert zvANG} = G -then zJavaPostAllParamsDelNmsOnlyThenHEsc -else {#COND -if {#insert zvANG} = u -then zJavaPostAllParamsDelNmsGncrs4FQP -else {#COND -if {#insert zvANG} = v -then zJavaPostAllParamsDelNmsGncrs4TV -else zzErrDlgBadAllParamsAng_M_ang}}}}}}}}	zPostAllParamsKeepDelRqstd_M_ang
zvANG_stL1c -*-	{#insert zCutL1c}{#SETPHRASE -description zvANG -content {#INSERTCLIPBOARD} -autotext zvANG -folder ctvv_folder}	zvANG_stL1c
zvANG_stN -*-	{#SETPHRASE -description zvANG -content n -autotext zvANG -folder ctvv_folder}	zvANG_stN
zvANG_stV -*-	{#SETPHRASE -description zvANG -content v -autotext zvANG -folder ctvv_folder}	zvANG_stV
zvANG_stPrompt -*-	{#SETPHRASE -description zvANG -content {#INPUT -head Keep what part of params? [a,A,n,g,G,...] -single} -autotext zvANG -folder ctvv_folder}	zvANG_stPrompt
zvLC_ALTR_stES -*-	{#SETPHRASE -description zvLC_ALTR -content -autotext zvLC_ALTR -folder ctvv_folder}	zvLC_ALTR_stES
zzAltrFlagPrgrmrNoteTxt	PROGRAMMER NOTE: Internally, the alteration pre~opt is divided into two separate variables: zvJCD_ES (currently '{#insert zvJCD_ES}') and zvLC_ALTR (currently '{#insert zvLC_ALTR}'). An alteration pre~opt of 'c' or ANY UPPERCASE value (such as 'O' or 'D') cause zvJCD_ES to be set to 'Coded', and zvLC_ALTR to be set to the empty~string (''). All other values cause zvJCD_ES to be set to the empty~string, and zvLC_ALTR to be set to the character's lowercase value. Examples: 'c'-->zvJCD_ES='Coded', zvLC_ALTR=''; 'q'-->zvJCD_ES='', zvLC_ALTR='q'; 'Q'-->zvJCD_ES='Coded', zvLC_ALTR='q'	zzAltrFlagPrgrmrNoteTxt
zzB4EndAtCodeRightIfCdd_M_cde	{#insert {#COND -if {#insert zvLC_ALTR} = k -then {#COND -if {#insert zvJCD_ES} = JCoded -then zPreBracketGTP -else z1slp} -else {#COND -if {#LENGTH {#insert zvJCD_ES}} = 0 -then z1slp -else zRIGHT}}}	zzB4EndAtCodeRightIfCdd_M_cde
zzErrDlgBadAllParamsAng_M_ang	{#MSGBOX -head ERROR -text ERROR ~~ The delete-what-from-parameters pre-option-character (currently zvANG='{#insert zvANG}') must be one of the following: [a,A,n,g,G,u,v] (see kulkpsyn).{#insert zCancelProcNowPostTxt}}	zzErrDlgBadAllParamsAng_M_ang
zzErrDlgBadParamAltrFlag_M_lltr	{#MSGBOX -head ERROR -text ERROR ~~ The alteration/surround pre-option (currently zvLC_ALTR='{#insert zvLC_ALTR}') must be one of the following: 'c', 'q', 'Q', 's', 'S', or '' (see ml1altersyn).  //  {#insert zzAltrFlagPrgrmrNoteTxt}{#insert zCancelProcNowPostTxt}}	zzErrDlgBadParamAltrFlag_M_lltr
zzEscGnrcsIfAngNotLCGPreBrktGTP -(**)-	(*ALWAYS escape generics in <CODE> (which are therefore literally-displayed in HTML!), if indeed there are generics:*){#insert {#COND -if {#insert zvANG} != g -then z1slp -else zHtmlEscJavaGenericsPostAllParams}}{#insert zPreBracketGTP}	zzEscGnrcsIfAngNotLCGPreBrktGTP
zzParamSetLltrCddIfUFrmCB	{#insert {#COND -if {#insert zLowercaseCB} != {#INSERTCLIPBOARD} -then zvJCD_ES_stCdd -else zvJCD_ES_stES}}{#SETPHRASE -description zvLC_ALTR -content {#insert zLowercaseCB} -autotext zvLC_ALTR -folder ctvv_folder}	zzParamSetLltrCddIfUFrmCB
zzRtlsyn_M_yon -- Needs zvSYNTAX_ON	{#insert {#COND -if {#insert zvSYNTAX_ON} = on -then rtlsyn -else z1slp}}	zzRtlsyn_M_yon
zzSetAngToL1cWycTo1	{#insert zvANG_stL1c}{#insert zvAWAY_CNT_st1}	zzSetAngToL1cWycTo1
zzSetAngToL1cWycTo2	{#insert zvANG_stL1c}{#insert zvAWAY_CNT_st2}	zzSetAngToL1cWycTo2
zzSetAngToL1cWycTo3	{#insert zvANG_stL1c}{#insert zvAWAY_CNT_st3}	zzSetAngToL1cWycTo3
zzSetAngToL1cWycTo4	{#insert zvANG_stL1c}{#insert zvAWAY_CNT_st4}	zzSetAngToL1cWycTo4
zzSetAngToL1cWycTo5	{#insert zvANG_stL1c}{#insert zvAWAY_CNT_st5}	zzSetAngToL1cWycTo5
zzSetAngToL1cWycToPrompt	{#insert zvANG_stL1c}{#insert zvAWAY_CNT_stPrompt}	zzSetAngToL1cWycToPrompt
zzSetCddToCddLltrToES	{#insert zvJCD_ES_stCdd}{#insert zvLC_ALTR_stES}	zzSetCddToCddLltrToES
zzSglOptSynTxt	[l]=sig up, [z]=down, [c]=CODE~d (gnrcs always escaped!), [[2~5,n]]=2nd,3rd,...,prompt~# sig	zzSglOptSynTxt
zzzEnterAng2	{#insert zENTER}{#insert zvANG2}{#insert zTSlp}	zzzEnterAng2
zzzJavaSigTestSig	{#insert zENTER2}{#insert zTAB}public final ReturnType<? extends Whatever> ciNull1(Object o_bj1, String sn_object1, boolean b_nullOk1, AClass<? extends Object> s_calling1, String s_nameBNullOk1)  {{#insert zENTER2}{#insert zBKSP2}	zzzJavaSigTestSig
zzzJavaSigTestSig2	{#insert zENTER2}{#insert zTAB}public final ReturnType<? extends Whatever> ciNull2(boolean b_b2, String s_s2, Object o_o2, SomeClass<? extends Whatever> s_c2, String s_s2)  {{#insert zENTER2}{#insert zBKSP2}	zzzJavaSigTestSig2
zzzJavaSigTestSig3	{#insert zENTER2}{#insert zTAB}public final ReturnType<? extends Whatever> ciNull3(boolean b_b3, String s_s3, Object o_o3, SomeClass<? extends Whatever> s_c3, String s_s3)  {{#insert zENTER2}{#insert zBKSP2}	zzzJavaSigTestSig3
zzzJavaTestIntroFileNewTest3SigsGTTop	{#insert zzJavaTestIntroFileNew}{#insert zzzJavaSigTestSig}{#insert zzzJavaSigTestSig2}{#insert zzzJavaSigTestSig3}{#insert zTPGTDocTop}	zzzJavaTestIntroFileNewTest3SigsGTTop
zzzSetAngAng2ToPrompt	{#insert zvANG_stPrompt}{#SETPHRASE -description zvANG2 -content {#insert zvANG} -autotext zvANG2 -folder ctvv_folder}	zzzSetAngAng2ToPrompt
zzzAng2	{#insert zvANG2}{#insert zTSlp}	zzzAng2
zzzLltr2	{#insert zvLC_ALTR2}{#insert zTSlp}	zzzLltr2
