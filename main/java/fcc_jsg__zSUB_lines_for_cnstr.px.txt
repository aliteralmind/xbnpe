__XBN-PhraseExpress is released under the LGPL 2.1	(*XBN-PhraseExpress: Large set of generically useful scripting tools for MS Windows, written in PhraseExpress and TextPad.  //  Copyright (C) 2013 Jeff Epstein  //  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  //  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.  //  You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA*)		(*Two tabs plus this comment, to force this phrase to be (a) imported, and (b) with NO autotext*)
(*JSG: Lines for constructor
   Is the setter called by the constructor?
      SETR: Calls ... set(default-value);
      PRIV: At initialization, does the getter crash or return a value?
         VAL: Causes get() to crash with a...
         CRSH: Causes get() to return...
         Both VAL and CRSH: xVar = default-value;
*)
zjsgLinesForConstructor	{#insert zjsgbMsgForDfltSetA}{#msgbox -head {#insert zjsgStrCldByCnstrH} -text {#insert zjsgStrCldByCnstrT} -ok zjsgLinesForConstructor_SETR -cancel zjsgbLinesForConstructor_PRIV}{#insert zjsgbMsgForDfltSetZ}	zjsgLinesForConstructor

(*JSG: Lines for constructor -- Sub-logic*)
zjsgLinesForConstructor_SETR	{#insert zjsgJDCallsDefaultSet}{#insert zjsgJavaCnstrSetterCall}	zjsgLinesForConstructor_SETR

(*JSG: Lines for constructor -- JavaDoc and Java lines*)
zjsgJDCallsDefaultSet	{#insert zjsgbJDCallsSetterThrHref}({#insert zjsgDefaultValue})</CODE></LI>{#insert zEnterBkspBksp}	zjsgJDCallsDefaultSet
zjsgJavaCnstrSetterCall	{#insert zTAB}{#insert zjsgbSetterName}({#insert zjsgDefaultValue});{#insert zEnterBksp}	zjsgJavaCnstrSetterCall

(*JXSG: Lines for constructor
   Is the setter called by the constructor?
      SETR: , default-value (to append to existing setter-call)
      PRIV: ***Same as JSG***
*)
zjxsgLinesForConstructor	{#insert zjsgbMsgForDfltSetA}{#msgbox -head {#insert zjsgStrCldByCnstrH} -text {#insert zjsgStrCldByCnstrT} // When the constructor IS the existing setter, choose [Cancel] and ignore the for-constructor lines. -ok zjxsgLinesForConstructor_SETR -cancel zjsgbLinesForConstructor_PRIV -defaultcancel}{#insert zjsgbMsgForDfltSetZ}	zjxsgLinesForConstructor
zjxsgLinesForConstructor_SETR	{#insert zjxsgMsgForDfltSetA}, {#insert zjsgVariableFQCN}{#insert zENTER}, {#insert zjsgDefaultValue}{#insert zENTER}{#insert zjxsgMsgForDfltSetZ}	zjxsgLinesForConstructor_SETR
zjxsgMsgForDfltSetA	{#insert zjxsgMsgForDfltSetPrefix}START---{#insert zENTER}	zjxsgMsgForDfltSetA
zjxsgMsgForDfltSetZ	{#insert zjxsgMsgForDfltSetPrefix}END---{#insert zENTER}	zjxsgMsgForDfltSetZ
zjxsgMsgForDfltSetPrefix	{#insert zobmPrefix}Default value parameter (and its JD-type) to append the existing setter-call and -link...	zjxsgMsgForDfltSetPrefix

(*JSGB: Lines for constructor -- Sub-logic*)
zjsgbLinesForConstructor_PRIV	{#msgbox -head Does the initialized getter return a value? -text After initialization, if the getter is called before doing anything else, does it successfully return a value (even if that value is null)? If it crashes, choose [No] -yes zjsgbLinesForConstructor_PRIV_VAL -no zjsgbLinesForConstructor_PRIV_NOVAL}{#insert zzjsgbJavaCnstrSetPrivVar}	zjsgbLinesForConstructor_PRIV
zjsgbLinesForConstructor_PRIV_NOVAL	{#msgbox -head Does the init'd getter crash? -text After initialization, the getter does NOT return a value. Does it crash? -yes zjsgbLinesForConstructor_PRIV_NOVAL_CRSH -no z5slp -defaultno}	zjsgbLinesForConstructor_PRIV_NOVAL
zjsgbLinesForConstructor_PRIV_NOVAL_CRSH	{#insert zjsgbJDCnstrCausesThrTO}crash with {#input -head Exception type thrown by getter? (note the space) -single -def an <CODE>IllegalState Exception</CODE>}.{#insert zEnterBkspBksp}	zjsgbLinesForConstructor_PRIV_NOVAL_CRSH
zjsgbLinesForConstructor_PRIV_VAL	{#insert zjsgbJDCnstrSetsGtrToThrOpenCODE}{#insert zjsgDefaultValue}</CODE>.</B>{#insert zEnterBkspBksp}	zjsgbLinesForConstructor_PRIV_VAL
zjsgbMsgForDfltSetA	{#insert zjsgbMsgForDfltSetPrefix}START---{#insert zENTER}	zjsgbMsgForDfltSetA
zjsgbMsgForDfltSetPrefix	{#insert zobmPrefix}For default set in constructor (ignore if using jxsetgetter and the constructor IS the existing setter)...	zjsgbMsgForDfltSetPrefix
zjsgbMsgForDfltSetZ	{#insert zjsgbMsgForDfltSetPrefix}END---{#insert zENTER}	zjsgbMsgForDfltSetZ
zjsgStrCldByCnstrH	Is the setter called by the constructor?	zjsgStrCldByCnstrH
zjsgStrCldByCnstrT	[OK]: The setter is called by the default constructor, with a default value. [Cancel]: The setter is not called. The private variable is directly set.	zjsgStrCldByCnstrT