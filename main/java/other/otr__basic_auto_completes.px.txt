__XBN-PhraseExpress is released under the LGPL 2.1	(*XBN-PhraseExpress is a large set of generically-useful Microsoft Windows scripting tools, written in PhraseExpress, using the plain-text editor TextPad as its foundation.  //  Copyright (C) 2013 Jeff Epstein  //  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  //  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.  //  You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA*)		(*Two tabs plus this comment, to force this phrase to be (a) imported, and (b) with NO autotext*)
cnst -- constructor	constructor	cnst
ddes -- ...START, ...END, cut start line (**)	(*Call from end of end line, where dot-dot-dot should go.*){#insert zz3dDupLineEndUpEndStart_wwOff}{#insert zCutEntireLine}{#insert zWordWrapOn}{#insert sypsyn}	ddes
ddse -- ...START, ...END, cut end line (**)	(*Call from end of start line, where dot-dot-dot should go.*){#insert zz3dDupLineEndUpEndStart_wwOff}{#insert zDOWN}{#insert zCutEntireLine}{#insert zWordWrapOn}{#insert sypsyn}	ddse
ddsed -- ...START, ...END, no cut (**)	(*Call from end of start line, where Dot-Dot-Dot should go.*){#insert zz3dDupLineEndUpEndStart_wwOff}{#insert zWordWrapOn}{#insert zEnterTab}{#insert sypsyn}	ddsed
eqlsf -- equals function for sub-class, w/ areFieldsEqual, which calls super	{#insert zzEqlsfReadInpEqlsJD}{#insert zzEqlsfEqlsBody}{#insert zzEqlsfAFQJD}{#insert zzEqlsfAFQBody}	eqlsf
eqlsfx -- Example input for eqlsf	xo x_o{#insert sypsyn}	eqlsfx
jfor -- int name at prompt	for(int {#insert zzIntNmDfltI} = 0; {#insert zzIntNmDfltI} < {#insert zYmark}; {#insert zzIntNmDfltI}++)  {{#insert zENTER2}\\\}{#insert zYUp}{#insert sypsyn}	jfor
zzIntNmDfltI	{#INPUT -head Int name? -def i -single}	zzIntNmDfltI
sypsyn	{#BALLOON -title Syntax: Java basics -text {#insert zzSypsyns1of7}=...START & ...END lines, {#insert zzSypsyns2of7}=/*...*/ ([b]=paste), {#insert zzSypsyns5of7}=for~loop, {#insert zzSypsyns6of7}=constructor  //  {#insert zzSypsyns7of7}=equals(o) func  //  javasyn}	sypsyn
zz3dDupLineEndUpEndStart_wwOff	{#BALLOON -title WARNING -text This will fail if word~wrap is off (was off when called)}{#insert zWordWrapOffFromTPDfltState}...{#insert zTPDupLine}END{#insert zUpEnd}START	zz3dDupLineEndUpEndStart_wwOff
zzCmpsrForClassesThatNeedDDD -- sub for MC-phrase	For classes that need to implement <CODE>{#insert zXmark}{#insert zJavaSelCopyThisClassName}{#insert zXUpPaste}{#BKSP -count 8}</CODE>, that cannot extend abstract or concrete implementations.	zzCmpsrForClassesThatNeedDDD
zzCpToLnHmR	{#insert zTPLineLeftExtend}{#insert zTPCopy}{#insert zRIGHT}	zzCpToLnHmR
zzEqlsfAFQBody	{#insert zEnterBksp}public boolean areFieldsEqual({#insert zvFOBJ_NAME} {#insert zvPARAM_NM})  {{#insert zENTER}return  (super.areFieldsEqual({#insert zvPARAM_NM})  &&  {#insert zXmark});{#insert zENTER}\\\}{#insert zENTER}{#SETCLIPBOARD {#insert zvPARAM_NM} {#insert zvVAR_NAME}}{#insert zXUp}{#BALLOON -title DONE -text Original input ('{#INSERTCLIPBOARD}') is in the clipboard}{#sleep 2000}{#insert sypsyn}	zzEqlsfAFQBody
zzEqlsfAFQJD	/**{#insert zEnterTab}<P>Are all internal values in the provided <CODE>{#insert zvFOBJ_NAME}</CODE> the same as in <I><CODE>this</CODE></I>?.</P>{#insert zENTER2}@return  <CODE>(<A HREF={#insert zAscQQ}YYY/{#insert zXJavaCopySuperClassNmXDown}{#insert zTPPaste}.html{#insert zAscQQ}>super</A>.<A HREF={#insert zAscQQ}YYY/{#insert zTPPaste}.html#areFieldsEqual(FULLY_QUALIFIED_PACKAGE_NAME.{#insert zTPPaste}){#insert zAscQQ}>areFieldsEqual</A>(SUPER_CLASS_ABBREVIATION) &nbsp;&amp;&amp; &nbsp; {#insert zYmark})</CODE>{#insert zEnterBksp} **/	zzEqlsfAFQJD
zzEqlsfEqlsBody	@Override public boolean equals(Object o_o)  {{#insert zENTER2}//See internal comments for com.github.xbn.lang.XbnObject.equals(o){#insert zENTER2}if(o_o == null)  {{#insert zENTER}throw  new NullPointerException({#insert zAscQQ}equals: o_o{#insert zAscQQ});{#insert zENTER}\\\}{#insert zENTER}if(this == o_o)  {{#insert zENTER}return  true;{#insert zENTER}\\\}{#insert zENTER}if(!(o_o instanceof {#insert zvFOBJ_NAME}))  {{#insert zENTER}return  false;{#insert zENTER}\\\}{#insert zENTER2}{#insert zvFOBJ_NAME} {#insert zvVAR_NAME} = ({#insert zvFOBJ_NAME})o_o;{#insert zENTER2}return  areFieldsEqual({#insert zvVAR_NAME});{#insert zENTER}\\\}{#insert zENTER}	zzEqlsfEqlsBody
zzEqlsfReadInpEqlsJD	{#insert zCutL1wBksp}{#SETPHRASE -description zvVAR_NAME -content {#INSERTCLIPBOARD} -autotext zvVAR_NAME -folder ctvv_folder}{#insert zCutL1w}{#SETPHRASE -description zvPARAM_NM -content {#INSERTCLIPBOARD} -autotext zvPARAM_NM -folder ctvv_folder}{#insert {#COND -if {#LENGTH {#TRIM {#insert zvPARAM_NM}}} = 0 -then zzErrDlgBadEqlsfInput_M_pVnm -else {#COND -if {#LENGTH {#TRIM {#insert zvVAR_NAME}}} = 0 -then zzErrDlgBadEqlsfInput_M_pVnm -else z1slp}}}{#insert zXJavaCopyThisClassNmXDown}{#insert zvFOBJ_NAME_stCB}/**{#insert zEnterTab}@return  <CODE>true</CODE> If <CODE>o_o</CODE> is non-<CODE>null</CODE>, a{#insert zYmark} <CODE>{#insert zvFOBJ_NAME}</CODE>, and <CODE><A HREF={#insert zAscQQ}#areFieldsEqual(_4FQP_{#insert zvFOBJ_NAME}){#insert zAscQQ}>areFieldsEqual</A>(({#insert zvFOBJ_NAME})o_o)</CODE> is <CODE>true</CODE>.{#insert zEnterBksp} **/{#insert zEnterBksp}	zzEqlsfReadInpEqlsJD
zzErrDlgBadEqlsfInput_M_pVnm	{#MSGBOX -head ERROR -text ERROR ~~ Missing required input for eqlsf (see eqlsfx): zvPARAM_NM='{#insert zvPARAM_NM}', zvVAR_NAME='{#insert zvVAR_NAME}'{#insert zCancelProcNowPostTxt}}	zzErrDlgBadEqlsfInput_M_pVnm
zzSeeComposerForAbstrct -- sub for MC-phrase	(*starts w spc*) For classes needing to implement <CODE>{#insert zTPPaste}</CODE>, that cannot extend <CODE>Abstract{#insert zTPPaste}</CODE>, see <CODE><A HREF={#insert zAscQQ}{#insert zTPPaste}Composer.html{#insert zAscQQ}>{#insert zTPPaste}Composer</A></CODE>.	zzSeeComposerForAbstrct
zzSypsyns7of7	eqlsf[x]	zzSypsyns7of7
zzSypsyns1of7	dd[es,se[d]]	zzSypsyns1of7
zzSypsyns2of7	jmc[b]	zzSypsyns2of7
zzSypsyns5of7	jfor	zzSypsyns5of7
zzSypsyns6of7	cnst	zzSypsyns6of7
zzzInpClassNm -- Sub for MC only	{#INPUT -head Class name? -single}	zzzInpClassNm
zzzInterfacePostAuthor -- Sub for MC only	{#insert zBKSP} **/{#insert zEnterBksp}public interface {#insert zvFOBJ_NAME} extends {#insert zYmark}  {{#insert zENTER}{#insert zYmark}{#insert zENTER}\\\}{#insert zENTER}{#SETCLIPBOARD {#insert zvFOBJ_NAME}}	zzzInterfacePostAuthor
zzzPubClassPostAuthor_M_cnm -- Sub for MC only	{#insert zBKSP} **/{#insert zEnterBksp}public class {#insert zvFOBJ_NAME} extends {#insert zYmark}  {{#insert zEnterBksp}//constructors...START{#insert zEnterTab}{#insert zYmark}{#insert zEnterBksp}//constructors...END{#insert zENTER}\\\}{#insert zENTER}{#insert zXUp}{#SETCLIPBOARD {#insert zvFOBJ_NAME}}	zzzPubClassPostAuthor_M_cnm
zzzPubClassPreAuthorSetCnmToCB -- Sub for MC only	{#insert zvFOBJ_NAME_stCB}package  {#insert zXmark};{#insert zENTER}/**{#insert zEnterTab}<P>{#insert zYmark}</P>{#insert zENTER}	zzzPubClassPreAuthorSetCnmToCB
zzzAtRetLineEndDocCastedSuperCallReturn -- Sub for MC only	{#insert zLEFT}{#insert zPostBracketGTP}{#insert zSelectL1wCopy}{#insert zvFOBJ_NAME_stCB}{#insert zTMFindPrevJavaFuncSigLine}{#insert zRIGHT}{#insert zTPParaUp}{#insert zMoveR1L1w}{#insert zzEtrUpSlshAstrAstrEnterTab}@return  <CODE>({#insert zvRET_W_GNRCS}){#insert zvPREK_stRLower}{#insert zvDRN_stR}{#insert zvPAP_stT}{#insert zzSetAngToAWycTo1}{#insert z1PPFuncLinkFromNextJFSigParamsDispFNmWOptPrek_M_drnFnmPrmsPapPrk}</CODE>{#insert zEnterBksp} **/{#insert zFindDlgOpenDown}{#insert zSEMI_COLON}{#insert zFindBtnNext}{#insert zFindDlgClose}{#insert zRIGHT}	zzzAtRetLineEndDocCastedSuperCallReturn
zzzPasteElimAbstractFromClassNameXUp -- Sub for MC only	{#insert zJavaSelCopyThisClassName}{#insert zXUpRight}{#insert zPasteXUpDelete}{#DEL -count 8}{#insert zTPMoveR1w}	zzzPasteElimAbstractFromClassNameXUp
zzzClsPrnDtApndForNxtPromptPluses -- Sub for MC only	).append({#insert zzzClsPrnDtApndForNxtPromptPlusesMidQappend}{#LOOP ).append({#insert zTPFindNext} -count {#CALC {#insert zvPLUSSES} - 1 -round 0 -thousands none}}).append(	zzzClsPrnDtApndForNxtPromptPluses
zzzClsPrnDtApndForNxtPromptPlusesMidQappend	{#SETPHRASE -description zvPLUSSES -content {#INPUT -head Find ' + ' how many times? (1+) -single} -autotext zvPLUSSES -folder ctvv_folder}{#insert zFindDlgOpenDownMCOnly}{#SETPHRASE -description zvFIND_WHAT -content (**) + (**) -autotext zvFIND_WHAT -folder ctvv_folder}{#insert zvFIND_WHAT}{#insert zFindBtnNext}{#insert zFindDlgClose}	zzzClsPrnDtApndForNxtPromptPlusesMidQappend
zzzAtSprsWarnUnchkd -- Sub for MC only	@SuppressWarnings({#insert zAscQQ}unchecked{#insert zAscQQ})	zzzAtSprsWarnUnchkd
zzzAtSprsWarn -- Sub for MC only	@SuppressWarnings({#insert zAscQQ}{#CURSOR}{#insert zAscQQ})	zzzAtSprsWarn
zzzSprCallToSameFuncRetThis_M_scals -- Sub for MC only -- Needs zvSPR_CALS	{#insert zvANG_stN}{#insert zvAWAY_CNT_st1}{#insert zvNUMBER_st0}{#LOOP {#insert zzNextSprCallToSameFuncRetThis_M_numScals} -count {#insert zvSPR_CALS}}{#insert zBalloonDone}	zzzSprCallToSameFuncRetThis_M_scals
zzNextSprCallToSameFuncRetThis_M_numScals -- Sub for MC only -- Needs zvNUMBER, zvSPR_CALS	{#insert zvNUMBER_incBy1}super.{#insert zzXPastePrevJFSigAtCrsrDelRqstdFrmParams_M_wycAng};{#insert zENTER}return  this;{#insert zENTER}\\\}{#insert {#COND -if {#insert zvNUMBER} < {#insert zvSPR_CALS} -then zzDownNewLnAftr -else z1slp}}	zzNextSprCallToSameFuncRetThis_M_numScals
zzzAtSprsWarnUnchkdVrrgs -- Sub for MC only	@SuppressWarnings({{#insert zAscQQ}unchecked{#insert zAscQQ}, {#insert zAscQQ}varargs{#insert zAscQQ}\\\})	zzzAtSprsWarnUnchkdVrrgs
zzDownNewLnAftr	{#insert zDOWN}{#insert zTPNewLineAfter}	zzDownNewLnAftr

zzJavaNonJDCmtBlock -- Sub for MC only	/*{#insert zENTER}{#insert zTAB}{#insert zEnterBksp} */{#insert zEnterBksp}{#insert zUP2}{#insert zEND}{#insert sypsyn}	zzJavaNonJDCmtBlock
zzJavaNonJDCmtBlockPaste -- Sub for MC only	/*{#insert zENTER}{#insert zTPPaste} */{#insert zEnterBksp}{#insert sypsyn}	zzJavaNonJDCmtBlockPaste
zzSymbolVarImportStmntsFromCompileOutput_M_fwt -- Needs zvFIND_WHAT	{#BALLOON -title WARNINGS -text When calling this phrase, RE must be off, {#insert zAscQQ}delete duplicate lines{#insert zAscQQ} must be checked in the sort dialog, and there must be no bookmarks in the Tool Output}{#insert zFindFieldWhat}{#insert zvFIND_WHAT}{#insert zFindFlagRETgl}{#insert zFindBtnMarkAll}{#insert zFindDlgClose}{#insert zTPBookmarkCopyAll}{#insert zFileNewPaste}{#insert zRplcDlgOpenRE}{#SETPHRASE -description zvFIND_WHAT -content ^.*(?:class|variable) (\w+)\b -autotext zvFIND_WHAT -folder ctvv_folder}{#insert zvFIND_WHAT}{#insert zRplcFieldWith}{#SETPHRASE -description zvRPLC_WITH -content \timport  {#insert zXmark}$1; -autotext zvRPLC_WITH -folder ctvv_folder}{#insert zvRPLC_WITH}{#insert zRplcBtnAllTDHnr}{#insert zRplcDlgCloseRE}{#insert zSortDialogNoConfirm}{#sleep 250}{#insert zBKSP}{#insert zSelectAllCopy}{#insert zFileCloseDiscardChanges}{#insert zSystemGTPrevDoc}{#insert zRIGHT}{#insert zLEFT}{#insert zzGTLineAftrPkg}{#insert zTPPaste}{#insert zTPGTDocTop}{#insert zXDown}(*Sets x-mark as the search-term:*){#insert zTPFindDlgOpen}{#insert zFindDlgClose}{#BALLOON -title Done. -text The x~mark is now the current search term.}	zzSymbolVarImportStmntsFromCompileOutput_M_fwt
zzStubFncsForImplCmpl -- Sub for MC only	/*stub functions for implements compile...START{#insert zENTER} stub functions for implements compile...END*/{#insert zEnterBksp}{#insert zTAB}{#BALLOON -title Write stub functions here -text Move END comment down when done.}	zzStubFncsForImplCmpl
zzStubFncsForNAbstrCmpl -- Sub for MC only	/*stub functions for non-abstract compile...START{#insert zENTER} stub functions for non-abstract compile...END*/{#insert zEnterBksp}{#insert zTAB}{#BALLOON -title Write stub functions here -text Move END comment down when done.}	zzStubFncsForNAbstrCmpl
