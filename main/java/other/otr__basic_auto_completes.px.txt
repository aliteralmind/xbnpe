__XBN-PhraseExpress is released under the LGPL 2.1	(*XBN-PhraseExpress is a large set of generically-useful Microsoft Windows scripting tools, written in PhraseExpress, using the plain-text editor TextPad as its foundation.  //  Copyright (C) 2013 Jeff Epstein  //  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  //  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.  //  You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA*)		(*Two tabs plus this comment, to force this phrase to be (a) imported, and (b) with NO autotext*)
cnst -- constructor	constructor	cnst
ddes -- ...START, ...END, cut start line (**)	(*Call from end of end line, where dot-dot-dot should go.*){#insert zz3dDupLineEndUpEndStart}{#insert zSelectSlpCutEntireLine}{#insert sypsyn}	ddes
ddse -- ...START, ...END, cut end line (**)	(*Call from end of start line, where dot-dot-dot should go.*){#insert zz3dDupLineEndUpEndStart}{#insert zDOWN}{#insert zSelectSlpCutEntireLine}{#insert sypsyn}	ddse
ddsed -- ...START, ...END, no cut (**)	(*Call from end of start line, where Dot-Dot-Dot should go.*){#insert zz3dDupLineEndUpEndStart}{#insert zEnterTab}{#insert sypsyn}	ddsed
zz3dDupLineEndUpEndStart	...{#insert zTPDupLine}END{#insert zUpEnd}START	zz3dDupLineEndUpEndStart
eqlsf -- equals function for sub-class, w/ areFieldsEqual, which calls super	{#insert zzEqlsfReadInpEqlsJD}{#insert zzEqlsfEqlsBody}{#insert zzEqlsfAFQJD}{#insert zzEqlsfAFQBody}	eqlsf
eqlsfx -- Example input for eqlsf	xo x_o{#insert sypsyn}	eqlsfx
jfr -- With nothing	for({#insert zYmark})  {{#insert zENTER2}\\\}{#insert zYUp}{#insert sypsyn}	jfr
jfri -- With int i	for(int i = 0; i < {#insert zYmark}; i++)  {{#insert zENTER2}\\\}{#insert zYUp}{#insert sypsyn}	jfri
jfrj -- With int j	for(int j = 0; j < {#insert zYmark}; j++)  {{#insert zENTER2}\\\}{#insert zYUp}{#insert sypsyn}	jfrj
jfrx -- With int {#insert zYmark}	for(int {#insert zYmark} = 0; {#insert zYmark} < {#insert zYmark}; {#insert zYmark}++)  {{#insert zENTER2}\\\}{#insert zXUp2}{#insert zXUp2}{#insert sypsyn}	jfrx
jlf	public final (*ends with space*){#insert sypsyn}	jlf
jls	public static (*ends with space*){#insert sypsyn}	jls
jlsf	public static final (*ends with space*){#insert sypsyn}	jlsf
jmc	/*{#insert zENTER}{#insert zTAB}{#insert zEnterBksp} */{#insert zENTER}{#insert zUP2}{#insert zEND}{#insert sypsyn}	jmc
jmcb	/*{#insert zENTER}{#insert zTPPaste} */{#insert zENTER}{#insert sypsyn}	jmcb
jrf	protected final (*ends with space*){#insert sypsyn}	jrf
jrs	protected static (*ends with space*){#insert sypsyn}	jrs
jrsf	protected static final (*ends with space*){#insert sypsyn}	jrsf
jts -- toString	toString{#insert sypsyn}	jts
jvs	private static (*ends with space*){#insert sypsyn}	jvs
syl -- System.out.println()	System.out.println({#insert zYmark});{#insert zENTER}{#insert zYUp}{#insert sypsyn}	syl
sylf -- Conditional println()	if({#insert zYmark})  {{#insert zENTER}System.out.println({#CURSOR});\\\}{#insert sypsyn}	sylf
syp -- System.out.print(...)	System.out.print({#CURSOR});{#insert sypsyn}	syp
sypf -- Conditional print()	if({#insert zYmark})  {{#insert zENTER}System.out.print({#insert zYmark});{#insert zENTER}\\\}  {#insert zYUp2}{#insert sypsyn}	sypf
sypq -- System.out.print('...')	System.out.print({#asc 34}{#CURSOR}{#asc 34});{#insert sypsyn}	sypq
sypqf -- Conditional print('...')	if({#insert zYmark})  {{#insert zENTER}System.out.print({#insert zAscQQ}{#insert zYmark}{#insert zAscQQ});{#insert zENTER}\\\}  {#insert zYUp2}{#insert sypsyn}	sypqf
sypsyn	{#BALLOON -title Syntax: Java basics -text {#insert zzSypsyns1of10}=...START & ...END lines, {#insert zzSypsyns2of10}=/*...*/ ([b]=paste), {#insert zzSypsyns3of10}=pblc [sttc] [fel], {#insert zzSypsyns4of10}=prot sttc, {#insert zzSypsyns5of10}=priv sttc, {#insert zzSypsyns6of10}=toString, {#insert zzSypsyns7of10}, {#insert zzSypsyns8of10}=for~loop, {#insert zzSypsyns9of10}=constructor  //  {#insert zzSypsyns10of10}=equals(o) func  //  javasyn}	sypsyn
syq -- System.out.println('')	System.out.println({#asc 34}{#CURSOR}{#asc 34});{#insert sypsyn}	syq
syqf -- Conditional println()	if({#insert zYmark})  {{#insert zENTER}System.out.println({#CURSOR});\\\}{#insert sypsyn}	syqf
zz4ProtInstr -- sub for MC-phrase	 <A HREF={#insert zAscQQ}{#insert zYmark}/../package-summary.html#_4prot{#insert zAscQQ}>Instructions</A> on implementing the &quot;<CODE>_4prot</CODE>&quot; functions in this class.	zz4ProtInstr
zzCpToLnHmR	{#insert zTPLineLeftExtend}{#insert zTPCopy}{#insert zRIGHT}	zzCpToLnHmR
zzEqlsfAFQBody	{#insert zEnterBksp}public boolean areFieldsEqual({#insert zvFOBJ_NAME} {#insert zvPARAM_NM})  {{#insert zENTER}return  (super.areFieldsEqual({#insert zvPARAM_NM})  &&  {#insert zXmark});{#insert zENTER}\\\}{#insert zENTER}{#SETCLIPBOARD {#insert zvPARAM_NM} {#insert zvVAR_NAME}}{#insert zXUp}{#BALLOON -title DONE -text Original input ('{#INSERTCLIPBOARD}') is in the clipboard}{#sleep 2000}{#insert sypsyn}	zzEqlsfAFQBody
zzEqlsfAFQJD	/**{#insert zEnterTab}<P>Are all internal values in the provided <CODE>{#insert zvFOBJ_NAME}</CODE> the same as in <I><CODE>this</CODE></I>?.</P>{#insert zENTER2}@return  <CODE>(<A HREF={#insert zAscQQ}YYY/{#insert zXJavaCopySuperClassNmXDown}{#insert zTPPaste}.html{#insert zAscQQ}>super</A>.<A HREF={#insert zAscQQ}YYY/{#insert zTPPaste}.html#areFieldsEqual(FULLY_QUALIFIED_PACKAGE_NAME.{#insert zTPPaste}){#insert zAscQQ}>areFieldsEqual</A>(SUPER_CLASS_ABBREVIATION) &nbsp;&amp;&amp; &nbsp; {#insert zYmark})</CODE>{#insert zEnterBksp} **/	zzEqlsfAFQJD
zzEqlsfEqlsBody	@Override public boolean equals(Object o_o)  {{#insert zENTER2}//See internal comments for xbn.lang.XBNObject.equals(o){#insert zENTER2}if(o_o == null)  {{#insert zENTER}throw  new NullPointerException({#insert zAscQQ}equals: o_o{#insert zAscQQ});{#insert zENTER}\\\}{#insert zENTER}if(this == o_o)  {{#insert zENTER}return  true;{#insert zENTER}\\\}{#insert zENTER}if(!(o_o instanceof {#insert zvFOBJ_NAME}))  {{#insert zENTER}return  false;{#insert zENTER}\\\}{#insert zENTER2}{#insert zvFOBJ_NAME} {#insert zvVAR_NAME} = ({#insert zvFOBJ_NAME})o_o;{#insert zENTER2}return  areFieldsEqual({#insert zvVAR_NAME});{#insert zENTER}\\\}{#insert zENTER}	zzEqlsfEqlsBody
zzEqlsfReadInpEqlsJD	{#insert zCutL1wBksp}{#SETPHRASE -description zvVAR_NAME -content {#INSERTCLIPBOARD} -autotext zvVAR_NAME -folder ctvv_folder}{#insert zCutL1w}{#SETPHRASE -description zvPARAM_NM -content {#INSERTCLIPBOARD} -autotext zvPARAM_NM -folder ctvv_folder}{#insert {#COND -if {#LENGTH {#TRIM {#insert zvPARAM_NM}}} = 0 -then zzErrDlgBadEqlsfInput_M_pVnm -else {#COND -if {#LENGTH {#TRIM {#insert zvVAR_NAME}}} = 0 -then zzErrDlgBadEqlsfInput_M_pVnm -else z1slp}}}{#insert zXJavaCopyThisClassNmXDown}{#insert zvFOBJ_NAME_stCB}/**{#insert zEnterTab}@return  <CODE>true</CODE> If <CODE>o_o</CODE> is non-<CODE>null</CODE>, a{#insert zYmark} <CODE>{#insert zvFOBJ_NAME}</CODE>, and <CODE><A HREF={#insert zAscQQ}#areFieldsEqual(_4FQP_{#insert zvFOBJ_NAME}){#insert zAscQQ}>areFieldsEqual</A>(({#insert zvFOBJ_NAME})o_o)</CODE> is <CODE>true</CODE>.{#insert zEnterBksp} **/{#insert zEnterBksp}	zzEqlsfReadInpEqlsJD
zzErrDlgBadEqlsfInput_M_pVnm	{#MSGBOX -head ERROR -text ERROR ~~ Missing required input for eqlsf (see eqlsfx): zvPARAM_NM='{#insert zvPARAM_NM}', zvVAR_NAME='{#insert zvVAR_NAME}'{#insert zCancelProcNowPostTxt}}	zzErrDlgBadEqlsfInput_M_pVnm
zzSeeBaseForAbstrct -- sub for MC-phrase	(*starts w spc*) For classes needing to implement <CODE>{#insert zTPPaste}</CODE>, that cannot extend <CODE>Abstract{#insert zTPPaste}</CODE>, see <CODE><A HREF={#insert zAscQQ}{#insert zTPPaste}Base.html{#insert zAscQQ}>{#insert zTPPaste}Base</A></CODE>.	zzSeeBaseForAbstrct
zzABaseClassForImplementing -- sub for MC-phrase	A base class for implementing <CODE>{#insert zXmark}{#insert zJavaSelCopyThisClassName}{#insert zXUpPaste}{#insert zBKSP4}{#insert zCopyL1w}</CODE>, for classes that cannot extend <CODE>Abstract{#insert zTPPaste}</CODE>. See <CODE><A HREF={#insert zAscQQ}Abstract{#insert zTPPaste}.html{#insert zAscQQ}>Abstract{#insert zTPPaste}</A></CODE>.{#MSGBOX -head '_4prot' instruction -text Need '_4prot' instruction sentence? -yes zz4ProtInstr -no z1slp}	zzABaseClassForImplementing
zzSypsyns1of10	dd[es,se[d]]	zzSypsyns1of10
zzSypsyns2of10	jmc[b]	zzSypsyns2of10
zzSypsyns3of10	jl[s][f]	zzSypsyns3of10
zzSypsyns4of10	jrs[f]	zzSypsyns4of10
zzSypsyns5of10	jvs	zzSypsyns5of10
zzSypsyns6of10	jts	zzSypsyns6of10
zzSypsyns7of10	sy[l,p[q],q][f]	zzSypsyns7of10
zzSypsyns8of10	jfr[[i,x,j]]	zzSypsyns8of10
zzSypsyns9of10	cnst	zzSypsyns9of10
zzSypsyns10of10	eqlsf[x]	zzSypsyns10of10
