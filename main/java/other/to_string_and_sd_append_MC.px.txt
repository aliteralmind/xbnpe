
 __XBN-PhraseExpress is released under the LGPL 2.1	(* <--**MUST_HAVE SPACE BEFORE UNDERSCORES, in this file only**  --XBN-PhraseExpress is a large set of generically-useful Microsoft Windows scripting tools, written in PhraseExpress, using the plain-text editor TextPad as its foundation.  //  Copyright (C) 2013 Jeff Epstein  //  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  //  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.  //  You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA*)		(*Two tabs plus this comment, to force this phrase to be (a) imported, and (b) with NO autotext*)
').append(   	{#insert zAscQQ}).append(	'0.
').append('   	{#insert zAscQQ}).append({#insert zAscQQ}	'0.
).append(	).append(	0.a
).append(	).append(	0.ap
).append( [also 0.a]	).append(	).a
).append( [also 0.a]	).append(	).ap
).append( [also 0.a] for ' + ' [prompt times]	{#insert zzzClsPrnDtApndForNxtPromptPluses}	).a
).append( for ' + ' [prompt times]	{#insert zzzClsPrnDtApndForNxtPromptPluses}	0.a
).append( for ' + ' [prompt times]	{#insert zzzClsPrnDtApndForNxtPromptPluses}	0.ap
).append( for ' + ' [prompt times] [also 0.a]	{#insert zzzClsPrnDtApndForNxtPromptPluses}	).ap
).append('	).append({#insert zAscQQ}	0.a
).append('	).append({#insert zAscQQ}	0.ap
).append(' [also 0.a]	).append({#insert zAscQQ}	).a
).append(' [also 0.a]	).append({#insert zAscQQ}	).ap
.append('')	.append({#insert zAscQQ}{#CURSOR}{#insert zAscQQ})	.ap
.append()	.append({#CURSOR})	.ap
StringBuilder	StringBuilder	Stri
appendToString	appendToString	appe
appendToString(sd) function	/**{#insert zEnterTab}@param  to_appendTo May not be {@code null}.{#insert zENTER}@see  #toString(){#insert zEnterBksp} **/{#insert zEnterBksp}public StringBuilder appendToString(StringBuilder to_appendTo)  {{#insert zENTER}try  {{#insert zENTER}{#insert zXmark}{#insert zENTER}\\\}  catch(RuntimeException rx)  {{#insert zENTER}throw  CrashIfObject.nullOrReturnCause(to_appendTo, {#insert zAscQQ}to_appendTo{#insert zAscQQ}, null, rx);{#insert zENTER}\\\}{#insert zENTER}return  to_appendTo;{#insert zENTER}\\\}{#insert zXUpDelete}	public s
new StringBuilder()	new StringBuilder()	new st
toString() function (blank)	public String toString()  {{#insert zENTER}{#insert zXmark}{#insert zENTER}\\\}{#insert zXUpDelete}	public s
toString() function (calls appendToString(sd) only)	/**{#insert zEnterTab}@return  <CODE>{@link #appendToString(StringBuilder) appendToString}(new StringBuilder()).toString()</CODE>{#insert zEnterBksp} **/{#insert zEnterBksp}public String toString()  {{#insert zENTER}return  appendToString(new StringBuilder()).toString();{#insert zENTER}\\\}	public s
zXmark};{#insert zENTER}\\\}{#insert zXUp}	lic S
