__XBN-PhraseExpress is released under the LGPL 2.1	(*XBN-PhraseExpress is a large set of generically-useful Microsoft Windows scripting tools, written in PhraseExpress, using the plain-text editor TextPad as its foundation.  //  Copyright (C) 2013 Jeff Epstein  //  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  //  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.  //  You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA*)		(*Two tabs plus this comment, to force this phrase to be (a) imported, and (b) with NO autotext*)
fnrq	{#MSGBOX -head fnrq: INTRO -text fnrq: About to make multiple replacements for the next X~occurances of a word (going down). The search term is the ONLY word on the current line (no whitespace). All replacements are on the following lines (single words, no whitespace). If you need whole~word, or regular~expression checked, do so before calling this.  //  WARNING: Extend~selection must not be checked, and all bookmarks are about to be cleared.}{#SETPHRASE -description zvRPLC_TERMS -content {#INPUT -head How many replacements? -single} -autotext zvRPLC_TERMS -folder ctvv_folder}{#insert zTPBookmarkClearAll}{#insert zHOME}{#insert zSelectR1wCopy}{#insert zvFIND_WHAT_stCB}{#insert zTPFindDlgOpen}{#insert zvFIND_WHAT}{#insert zFindDlgClose}{#LOOP {#insert zDownHome}{#insert zCopyR1w}{#insert zTPBookmarkToggle}{#insert zTPFindNext}{#insert zTPPaste}{#insert zTPBookmarkGTPrevToggle} -count {#insert zvRPLC_TERMS}}{#insert zzNwrqsyn_M_yon}	fnrq
fnrqx	boolean{#insert zENTER}char{#insert zENTER}byte{#insert zENTER}short{#insert zENTER}int{#insert zENTER}long{#insert zENTER}float{#insert zENTER}double{#insert zENTER2}public boolean get(int i_index)  {{#insert zENTER}return  aPrimitive[i_ndex];{#insert zENTER}\\\}{#insert zENTER}{#insert zzNwrqsyn_M_yon}	fnrqx
nDWrqx1st2LinesNoNL	{#insert zTPFileNew}char Character Char{#insert zENTER}byte Byte Byte{#insert zENTER}short Short Short	nDWrqx1st2LinesNoNL
nDWrqxDemoFunc	{#insert zTAB}/**{#insert zEnterTab}<P>Get a new array of <CODE>char</CODE>-s containing all element-values in the <CODE>charArrayable</CODE>, inculding <CODE>null</CODE>-value management.</P>{#insert zENTER2}<P><I>See: <CODE><A HREF={#insert zAscQQ}charArrayable.html#getPrimitiveArray(_4FQP_String){#insert zAscQQ}>getPrimitiveArray</A>(s)</CODE></I></P>{#insert zENTER2}@param  pa_bl  May not be <CODE>null</CODE>.{#insert zENTER}@param  s_clgFunc  For potential error messages. <I>Should</I> not be <CODE>null</CODE> or empty.{#insert zEnterBksp} **/{#insert zEnterBksp}public static final char[] getCharArray(charArrayable pa_bl, String s_clgFunc)  {{#insert zENTER}IWPrimitiveArrayable<Character> iwpap = (IWPrimitiveArrayable<Character>)iwpa;{#insert zENTER2}iwpap.setGetIInstance(null, pa_bl);{#insert zENTER2}...{#insert zENTER2}{#insert zBKSP2}{#insert zBalloonDone}{#sleep 2000}	nDWrqxDemoFunc
ndrq	{#insert zTPGTDocTop}{#insert zWordWrapOffFromTPDfltState}{#insert zzNdrqIntroDlg}{#insert zzAtDocTopSetCountFindWhats_reOn}{#insert zzAtRplcWLnStartSetAllRplcWiths_M_stc}{#insert zRIGHT}{#insert zWordWrapOn}{#insert zzMakeAllRplcs_M_stcStms}{#insert zLEFT}{#insert zzNwrqsyn_M_yon}	ndrq
ndrqx -- ndrq example input	{#insert nDWrqx1st2LinesNoNL}{#insert zENTER2}{#insert nDWrqxDemoFunc}{#insert zzNwrqsyn_M_yon}	nwrqx
nwrq	{#insert zzNwrqRAW}{#insert zzNwrqsyn_M_yon}	nwrq
nwrqm	{#insert zzNwrqRAW}{#insert nwrqmerge}{#insert zzNwrqsyn_M_yon}	nwrqm
nwrqmerge -- RIGHT after running nwrq, run this to merge all output	{#MSGBOX -head nwrqmerge -text nwrqmerge  //  About to merge all replacements from the temporary files, to the bottom of the original document.}{#insert zTPGTDocBottom}{#LOOP {#insert zzMergeCloseNextNwrqFile} -count {#insert zvLINE_COUNT}}{#insert zzNwrqsyn_M_yon}	nwrqmerge
nwrqsyn	{#BALLOON -title Syntax: Simple replacement sequences -text {#insert zzNwrqsyns1of3}=MULTIPLE replacement sequences for below text.  //  [m]=then merge, [merge]=for IMMEDIATELY after mwrq  //  {#insert zzNwrqsyns2of3}: One rplc seq for next occurances of a word  //  {#insert zzNwrqsyns3of3}=One rplc seq for entire doc  //  [x]=example input  //  snrsyn}	nwrqsyn
nwrqx -- nwrq example input	{#insert nDWrqx1st2LinesNoNL}{#insert zENTER}long Long Long{#insert zENTER}float Float Float{#insert zENTER}boolean Boolean Boolean{#insert zENTER2}{#insert zUP}{#insert zTPBookmarkToggle}{#insert zDOWN}{#insert nDWrqxDemoFunc}{#insert zzNwrqsyn_M_yon}	nwrqx
zzAtDocTopSetCountFindWhats_reOn	{#insert zSelCopyEntireLineNoNL}{#insert zFileNewPaste}{#insert zRplcDlgOpenRE}{#SETPHRASE -description zvFIND_WHAT -content \w+ -autotext zvFIND_WHAT -folder ctvv_folder}{#insert zvFIND_WHAT}{#insert zRplcWithNOTHING}{#insert zRplcBtnAllTD}{#insert zRplcDlgCloseRE}{#insert zSelectAllCopy}{#SETPHRASE -description zvSRCH_TRM_CNT -content {#CALC {#insert zCBLen} + 1 -round 0 -thousands none} -autotext zvSRCH_TRM_CNT -folder ctvv_folder}{#BALLOON -title Number of search~terms -text {#insert zvSRCH_TRM_CNT} (the find~what and all replace~with lines must have {#insert zvSRCH_TRM_CNT} words in it, separated by spaces.)}{#insert zFileCloseDiscardChanges}{#insert zLEFT}{#insert zzAtDocTopSetFindWhats_M_stc}	zzAtDocTopSetCountFindWhats_reOn
zzAtDocTopSetFindWhats_M_stc -- Needs zvSRCH_TRM_CNT	{#insert zvNUMBER_st0}{#LOOP {#insert zzSetNextFindWhat_M_num} -count {#insert zvSRCH_TRM_CNT}}	zzAtDocTopSetFindWhats_M_stc
zzAtLine2StartMakeRplcSetRplcWithsLoop_M_stcFwsLnc -(*Needs*)-	(*Needs zvSRCH_TRM_CNT, zvFIND_WHAT[#], zvLINE_COUNT*){#insert zFindFlagMConOnly}{#LOOP {#insert zzAtRplcWithLnStartSetRplcWsMakeRplcs_M_stcFws}{#insert zTPGTDocTop}{#insert zTPBookmarkGTNextToggle} -count {#CALC {#insert zvLINE_COUNT} - 1 -round 0 -thousands none}}{#insert zzAtRplcWithLnStartSetRplcWsMakeRplcs_M_stcFws}{#insert zTPGTDocTop}	zzAtLine2StartMakeRplcSetRplcWithsLoop_M_stcFwsLnc
zzAtRplcWLnStartSetAllRplcWiths_M_stc -- Needs zvSRCH_TRM_CNT	{#insert zvNUMBER_st0}{#LOOP {#insert zzSetPassNextRplcWith_M_num} -count {#insert zvSRCH_TRM_CNT}}	zzAtRplcWLnStartSetAllRplcWiths_M_stc
zzAtRplcWithLnStartSetRplcWsMakeRplcs_M_stcFws -(*Needs*)-	(*Needs zvSRCH_TRM_CNT, zvNUMBER (inc 1st), zvFIND_WHAT[zvNUMBER]*){#insert zzAtRplcWLnStartSetAllRplcWiths_M_stc}(*At start of NEXT set of search terms*){#insert zTPBookmarkToggle}{#insert zTPBookmarkGTNext}{#insert zzRightSTDocBottom}{#insert zTPCopy}{#insert zFileNewPaste}{#insert zvNUMBER_st0}{#insert zzBalSearchTerms_M_num0}{#insert zzMakeAllRplcs_M_stcStms}{#insert zTPGTDocTop}{#insert zSystemGTPrevDoc}	zzAtRplcWithLnStartSetRplcWsMakeRplcs_M_stcFws
zzBalSearchTerms_M_num0	{#BALLOON -title Search terms -text {#insert zvNUMBER_st0}{#LOOP {#insert zvNUMBER_incBy1}fw{#insert zvNUMBER}='{#insert zvFIND_WHAT{#insert zvNUMBER}}', (**) -count {#insert zvSRCH_TRM_CNT}}{#insert zvNUMBER_st0}{#LOOP {#insert zvNUMBER_incBy1}rw{#insert zvNUMBER}='{#insert zvRPLC_WITH{#insert zvNUMBER}}', (**) -count {#insert zvSRCH_TRM_CNT}}}	zzBalSearchTerms_M_num0
zzMakeAllRplcs_M_stcStms -- Needs zvSRCH_TRM_CNT, zvFIND_WHAT#, zvRPLC_WITH#	{#insert zvNUMBER_st0}{#insert zTPRplcDlgOpen}{#LOOP {#insert zzRplcNextSearchTerm_M_numStms} -count {#insert zvSRCH_TRM_CNT}}{#insert zRplcDlgClose}	zzMakeAllRplcs_M_stcStms
zzMergeCloseNextNwrqFile -- Currently in original document	{#sleep 250}{#insert zSystemGTNextDoc}{#insert zSelectAllCopy}{#insert zFileCloseDiscardChanges}{#sleep 100}{#insert zEnterHome}{#sleep 50}{#insert zTPPaste}{#sleep 500}	zzMergeCloseNextNwrqFile
zzNdrqIntroDlg	{#MSGBOX -head ndrq intro -text About to start 'ndrq' ~~ A single replacement sequence (non~whole~word, non~regex) for the current document. See 'ndrqx' for example input.  //  Line one is the find~what's. The order of replacements is left to right.  //  Line two is the replace~with's. These lines must have the same number of words, with all words space~delimited, and containing only letters, digits and underscores. (There may not be any whitespace at the start or end of lines.)  //  Below these two lines is the text to be replaced. Note that the entire document, including the find-what terms in line one, are changed. // About to count the number of find~what strings, which will use a temporary document.  //  WARNING: Word~wrap must currently be off (should have been on when you called this).  //  WARNING: This will fail badly if a search term is not found.}	zzNdrqIntroDlg
zzNwrqIntroDlg	{#MSGBOX -head nwrq intro -text About to start 'nwrq' ~~ Multiple replacement sequences for the below text. See 'nwrqx' for example input.  //  Line one is the find~what's. The order of replacements is left to right.  //  Line two through the bookmarked~line, are the replace~with's. Each of these lines must have the same number of words, with all words space~delimited, and containing only letters, digits and underscores. (There may not be any whitespace at the start or end of lines.)  //  Below the bookmarked line is the text to be replaced (WARNING: There must be only one bookmark in the document, and when merging output, the bottom of the merge~result is the FIRST set of (the top~most) replace-terms).  Each result will be in a new document. // About to count the number of find~what strings, and the number of replace~with lines. Both will use a temporary document.  //  WARNING: Word~wrap must currently be off (should have been on when you called this)  //  WARNING: If there are any other bookmarks aside from the one between the search~terms and the text, this will fail.  //  WARNING: This will fail badly if a search term is not found.}	zzNwrqIntroDlg
zzNwrqRAW	{#insert zTPGTDocTop}{#insert zWordWrapOffFromTPDfltState}{#insert zzNwrqIntroDlg}{#insert zzAtDocTopSetCountFindWhats_reOn}{#insert zGTDlgOpenBookmarkExtendGo}{#insert zTPCopy}{#insert zvHNR_YES_stES}{#insert zGetNonWSLineCountForCB_M_hnry}{#insert zLEFT}{#insert zzAtLine2StartMakeRplcSetRplcWithsLoop_M_stcFwsLnc}	zzNwrqRAW
zzNwrqsyn_M_yon -- Needs zvSYNTAX_ON	{#insert {#COND -if {#insert zvSYNTAX_ON} = on -then nwrqsyn -else z1slp}}	zzNwrqsyn_M_yon
zzNwrqsyns1of3	nwrq[[m[erge],x]]	zzNwrqsyns1of3
zzNwrqsyns2of3	fnrq[x]	zzNwrqsyns2of3
zzNwrqsyns3of3	ndrq[x]	zzNwrqsyns3of3
zzRightSTDocBottom	{#insert zRIGHT}{#insert zTPSTDocBottom}	zzRightSTDocBottom
zzRplcNextSearchTerm_M_numStms	{#insert zvNUMBER_incBy1}{#insert zvFIND_WHAT{#insert zvNUMBER}}{#insert zRplcFieldWith}{#insert zvRPLC_WITH{#insert zvNUMBER}}{#insert zRplcBtnAllTD}	zzRplcNextSearchTerm_M_numStms
zzSetNextFindWhat_M_num -- Needs zvNUMBER=counter, inc 1st	{#insert zvNUMBER_incBy1}{#insert zSelectR1wCopy}{#SETPHRASE -description zvFIND_WHAT{#insert zvNUMBER} -content {#INSERTCLIPBOARD} -autotext zvFIND_WHAT{#insert zvNUMBER} -folder ctvv_folder}{#insert zRIGHT2}	zzSetNextFindWhat_M_num
zzSetPassNextRplcWith_M_num	{#insert zvNUMBER_incBy1}{#insert zSelectR1wCopy}{#SETPHRASE -description zvRPLC_WITH{#insert zvNUMBER} -content {#INSERTCLIPBOARD} -autotext zvRPLC_WITH{#insert zvNUMBER} -folder ctvv_folder}{#insert zRIGHT2}	zzSetPassNextRplcWith_M_num
