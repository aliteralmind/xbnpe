quotientmoddemo -- zzTestQuotientMod ALT KC	{#insert zzTestQuotientMod}	quotientmoddemo

zDbgTxtAllQuotientModulo1IfModTtlBlksInputAndOutput	Debugging the just-called zQuotientModulo1IfModTtlBlks_M_divisorDividend  //  INPUT: zvDIVIDEND_TOP='{#insert zvDIVIDEND_TOP}', zvDIVISOR_BTM='{#insert zvDIVISOR_BTM}'  //  OUTPUT: zvQUOTIENT='{#insert zvQUOTIENT}', zvMODULO='{#insert zvMODULO}', {#insert zvDIVIDEND_TOP}/{#insert zvDIVISOR_BTM}={#insert zvQUOTIENT}, remainder {#insert zvMODULO}  //  zv1_IF_MOD_GT0={#insert zv1_IF_MOD_GT0}, zvTTL_DIV_BLKS=zvQUOTIENT+zv1_IF_MOD_GT0={#CALC {#insert zvQUOTIENT} + {#insert zv1_IF_MOD_GT0} -round 0 -thousands none}	zDbgTxtAllQuotientModulo1IfModTtlBlksInputAndOutput

zDbgTxtDvsrDivdrQtntModIfMod -(**)-	(*Needs zvDIVISOR_BTM, zvDIVIDEND_TOP, zvQUOTIENT, zvMODULO, zv1_IF_MOD_GT0*)zvDIVISOR_BTM='{#insert zvDIVISOR_BTM}', zvDIVIDEND_TOP='{#insert zvDIVIDEND_TOP}', zvQUOTIENT='{#insert zvQUOTIENT}', zvMODULO='{#insert zvMODULO}', zv1_IF_MOD_GT0='{#insert zv1_IF_MOD_GT0}'	zDbgTxtDvsrDivdrQtntModIfMod

zInitAllQuotientOutputVars -(**)-	(*Sets all the following to the empty-string: zvQUOTIENT, zvMODULO, zv1_IF_MOD_GT0, zvTTL_DIV_BLKS*){#SETPHRASE -description zvQUOTIENT -content -autotext zvQUOTIENT -folder ctvv_folder}{#SETPHRASE -description zvMODULO -content -autotext zvMODULO -folder ctvv_folder}{#SETPHRASE -description zv1_IF_MOD_GT0 -content -autotext zv1_IF_MOD_GT0 -folder ctvv_folder}{#SETPHRASE -description zvTTL_DIV_BLKS -content -autotext zvTTL_DIV_BLKS -folder ctvv_folder}	zInitAllQuotientOutputVars

zInitDividendDivisor -- Sets zvDIVIDEND_TOP & zvDIVISOR_BTM to ''	{#SETPHRASE -description zvDIVIDEND_TOP -content -autotext zvDIVIDEND_TOP -folder ctvv_folder}{#SETPHRASE -description zvDIVISOR_BTM -content -autotext zvDIVISOR_BTM -folder ctvv_folder}	zInitDividendDivisor

zQuotientModulo1IfModTtlBlks_M_divisorDividend -- Also sets zvTTL_DIV_BLKS	{#insert zQuotientModulo1IfMod_M_divisorDividend}{#SETPHRASE -description zvTTL_DIV_BLKS -content {#CALC ({#insert zvQUOTIENT} + {#insert zv1_IF_MOD_GT0}) -round 0 -thousands none} -autotext zvTTL_DIV_BLKS -folder ctvv_folder}	zQuotientModulo1IfModTtlBlks_M_divisorDividend

zQuotientModulo1IfMod_M_divisorDividend -(**)- Also sets zv1_IF_MOD_GT0 (otherwise 0)	(*Example use: You have 64 phrases calls, which need to be called sequentially. Calling all 64 in a single phrase would be way too long. Instead you'll have a master phrase 'zCallAllPhrases', which has a series of sub-phrases: zCallAllPhrases1of[zvQUOTIENT + zv1_IF_MOD_GT0], zCallAllPhrases2of[zvQUOTIENT + zv1_IF_MOD_GT0], ....*){#insert zQuotientModulo_M_divisorDividend}{#SETPHRASE -description zv1_IF_MOD_GT0 -content {#COND -if {#insert zvMODULO} = 0 -then 0 -else 1} -autotext zv1_IF_MOD_GT0 -folder ctvv_folder}	zQuotientModulo1IfMod_M_divisorDividend

zQuotientModulo_M_divisorDividend -(*Needs, sets*)-	(*Needs zvDIVISOR_BTM, zvDIVIDEND_TOP (both integers!), sets zvQUOTIENT, zvMODULO*){#insert zQuotient_M_divisorDividend}{#SETPHRASE -description zvMODULO -content {#CALC {#insert zvDIVIDEND_TOP} - ({#insert zvDIVISOR_BTM} * {#insert zvQUOTIENT}) -round 0 -thousands none} -autotext zvMODULO -folder ctvv_folder}	zQuotientModulo_M_divisorDividend

zQuotient_M_divisorDividend -(*Needs, sets*)-	(*Needs zvDIVISOR_BTM, zvDIVIDEND_TOP (both integers!), sets zvQUOTIENT (to an integer! For example 65/10 has a quotient of 6, and a mod of 5)*){#insert zInitAllQuotientOutputVars}{#SETPHRASE -description zvQUOTIENT -content {#CALC {#insert zvDIVIDEND_TOP} / {#insert zvDIVISOR_BTM} -thousands none}. -autotext zvQUOTIENT -folder ctvv_folder}(*<--NOT rounding! The ending dot is in case the answer actually is an integer. If it is an integer, then without a dot the following SUBSTR will fail. About to reset the quotient to itself, up-through-but-not-including the (first) dot.*){#SETPHRASE -description zvQUOTIENT -content {#SUBSTR {#insert zvQUOTIENT} -from 0 -count {#CALC {#POS {#insert zvQUOTIENT} -substr .} - 1 -round 0 -thousands none}} -autotext zvQUOTIENT -folder ctvv_folder}	zQuotient_M_divisorDividend

zvTTL_DIV_BLKS_stQtnPls1IfMod -- Needs zvQUOTIENT, zv1_IF_MOD_GT0		zvTTL_DIV_BLKS_stQtnPls1IfMod

zzTestQuotientMod	{#SETPHRASE -description zvDIVIDEND_TOP -content 65 -autotext zvDIVIDEND_TOP -folder ctvv_folder}{#SETPHRASE -description zvDIVISOR_BTM -content 10 -autotext zvDIVISOR_BTM -folder ctvv_folder}{#insert zFcsTPFileNew}quotientmoddemo...START{#ENTER}{#TAB}Executing zDbgTxtAllQuotientModulo1IfModTtlBlksInputAndOutput{#insert zQuotientModulo1IfModTtlBlks_M_divisorDividend}{#ENTER}{#insert zDbgTxtAllQuotientModulo1IfModTtlBlksInputAndOutput}{#ENTER}{#BKSP}quotientmoddemo...DONE	zzTestQuotientMod
