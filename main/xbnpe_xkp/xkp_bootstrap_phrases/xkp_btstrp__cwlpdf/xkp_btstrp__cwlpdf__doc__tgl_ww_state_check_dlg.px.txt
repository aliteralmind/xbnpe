__XBN-PhraseExpress is released under the LGPL 2.1	(*XBN-PhraseExpress is a large set of generically-useful Microsoft Windows scripting tools, written in PhraseExpress, using the plain-text editor TextPad as its foundation.  //  Copyright (C) 2013 Jeff Epstein  //  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  //  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.  //  You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA*)		(*Two tabs plus this comment, to force this phrase to be (a) imported, and (b) with NO autotext*)
swwrc -- zSetNumberOfWWsToRecheckState	{#insert zSetNumberOfWWsToRecheckState}	swwrc
zSetNumberOfWWsToRecheckState	{#MSGBOX -head Set word~wrap recheck count -text About to ask you how many times word~wrap be toggled before prompting you to verify ww~state. To NOT verify, set this to '~1'.  //  Note that this ww~state~recheck is inteded for SMALL STANDALONE PROCESSES (such as 'c2pl' or 'klw1') that use word~wrap-with-state (zvWORD_WRAP_ON), and which cannot truly know whether word~wrap is on at any one point. This is largely due to the fact that the user may switch documents--or TextPad instances--at any time, or directly trigger TextPad's zTPToggleWW, which does not update or know state~~both situations may result in zvWORD_WRAP_ON becoming inaccurate.  //  This recheck is NOT intended for processes that are always in control of ww-state (because they perhaps do their own ww-state check before starting, and prevent the previously-mentioned issues). These processes, which are likely more substantial and larger, should not ever call the '...MaybeRecheck[State]' phrases.  //  For processes that do use these '...MaybeRecheck[State]' phrases, these checks should only be done at the start of the process~~not the end. Therefore, only call '...MaybeRecheck[State]' at the beginning, and only call 'zWordWrap[Off,On]' at the end.}{#SETPHRASE -description zvWW_RCHK_CNT -content {#INPUT -head How many ww-s until state-re-check? -def 4 -single} -autotext zvWW_RCHK_CNT -folder ctvv_folder}{#BALLOON -title DONE -text zvWW_RCHK_CNT set to {#insert zvWW_RCHK_CNT}.}	zSetNumberOfWWsToRecheckState
zToggleWWMaybeRecheckState -- Needs zvWW_RCHK_CNT	{#insert zzIncWWRecheckMaybeDlg_M_cwrcWrc}{#insert zToggleWWAndState_M_wwo}	zToggleWWMaybeRecheckState
zWWOffSvStateMaybeRecheck -- Needs zvWW_RCHK_CNT	{#insert zzIncWWRecheckMaybeDlg_M_cwrcWrc}{#insert zWordWrapOffSaveState}	zWWOffSvStateMaybeRecheck
zWWOffHmSvStateMaybeRecheck -- Needs zvWW_RCHK_CNT	{#insert zWWOffSvStateMaybeRecheck}{#insert zHOME}	zWWOffHmSvStateMaybeRecheck
zWWOnSaveStateMaybeRecheck -- Needs zvWW_RCHK_CNT	{#insert zzIncWWRecheckMaybeDlg_M_cwrcWrc}{#insert zWordWrapOnSaveState}	zWWOnSaveStateMaybeRecheck
zWordWrapOffMaybeRecheckState -- Needs zvWW_RCHK_CNT	{#insert zzIncWWRecheckMaybeDlg_M_cwrcWrc}{#insert zWordWrapOff}	zWordWrapOffMaybeRecheckState
zWordWrapOnMaybeRecheckState -- Needs zvWW_RCHK_CNT	{#insert zzIncWWRecheckMaybeDlg_M_cwrcWrc}{#insert zWordWrapOn}	zWordWrapOnMaybeRecheckState
zzIncWWRecheckMaybeDlg_M_cwrcWrc -- Needs zvCURR_WW_RCHK_CNT, zvWW_RCHK_CNT	(*Increment counter*){#SETPHRASE -description zvCURR_WW_RCHK_CNT -content {#CALC {#insert zvCURR_WW_RCHK_CNT} + 1 -round 0 -thousands none} -autotext zvCURR_WW_RCHK_CNT -folder ctvv_folder}{#insert {#COND -if {#insert zvWW_RCHK_CNT} = -1 -then z1slp -else {#COND -if {#insert zvCURR_WW_RCHK_CNT} >= {#insert zvWW_RCHK_CNT} -then zzWWCheckStateDlgResetCntrWW -else z1slp}}}(*Permanent debugging-->*)(*{#MSGBOX -head zzIncWWRecheckMaybeDlg_M_cwrcWrc -text zvWW_RCHK_CNT='{#insert zvWW_RCHK_CNT}', zvCURR_WW_RCHK_CNT='{#insert zvCURR_WW_RCHK_CNT}'}<--Permanent debugging*)	zzIncWWRecheckMaybeDlg_M_cwrcWrc
zzWWCheckStateDlgResetCntrWW	{#MSGBOX -head Please verify word-wrap state (off) -text {#insert zzWWCheckDlgTxt} -yes zzvWORD_WRAP_ON_stOn -no zzvWORD_WRAP_ON_stOff}{#insert zvCURR_WW_RCHK_CNT_st0}	zzWWCheckStateDlgResetCntrWW
zzWWCheckDlgTxt	zvWORD_WRAP_ON equals '{#insert zvWORD_WRAP_ON}', which means that word-wrap is currently {#COND -if {#insert zvWORD_WRAP_ON} = on -then on -else off}.  //  Please verify this: *IS* word wrap currently on?  // Note: zvWW_RCHK_CNT={#insert zvWW_RCHK_CNT}, meaning every {#insert zvWW_RCHK_CNT} times that word-wrap is toggled, you'll be asked to verify this. Use 'swwrc' to change this value.	zzWWCheckDlgTxt
zvCURR_WW_RCHK_CNT_st0	{#SETPHRASE -description zvCURR_WW_RCHK_CNT -content 0 -autotext zvCURR_WW_RCHK_CNT -folder ctvv_folder}	zvCURR_WW_RCHK_CNT_st0
