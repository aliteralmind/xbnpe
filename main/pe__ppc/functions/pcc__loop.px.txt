__XBN-PhraseExpress is released under the LGPL 2.1	(*XBN-PhraseExpress: Large set of generically useful scripting tools for MS Windows, written in PhraseExpress and TextPad.  //  Copyright (C) 2013 Jeff Epstein  //  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  //  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.  //  You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA*)		(*Two tabs plus this comment, to force this phrase to be (a) imported, and (b) with NO autotext*)
lcmtargetinfo	{#BALLOON -title LOOP vs COND vs MSGBOX -text The main 'action' parameter in a LOOP (the text immediately following 'LOOP'), must be a phrase CALL (surrounded by '\\\{#insert ' and '\\\}'). COND (~then and ~else) and MSGBOX~es (~ok, ~yes, ~no, ~cancel) params require only the phrase NAME, not a phrase call.}	lcmtargetinfo

lop -- {#LOOP ... -count...}	{#insert zvESC_LVL_CNT_st0}{#insert zLopRAW_M_elc}{#insert zzLopSyn}	lop
lopb -- {#LOOP [paste] -count [crsr]}	{#insert zvESC_LVL_CNT_st0}{#insert zLopbRAW_M_elc}{#insert zzLopSyn}	lopb
lopbp -- lopb, escaped	{#insert zvESC_LVL_CNT_st1}{#insert zLopbRAW_M_elc}{#insert zzLopSyn}	lopbp
lopbq -- lopb, doubly-escaped (or more)	{#insert zvESC_LVL_CNT_stPrompt}{#insert zLopbRAW_M_elc}{#insert zzLopSyn}	lopbq
lopc -- {#LOOP ... -count [cursor]}	{#insert zvESC_LVL_CNT_st0}{#insert zLopcRAW_M_elc}{#insert zzLopSyn}	lopc
lopcb -- {#LOOP [cursor] -count [paste]} (uses x-mark)	{#insert zvESC_LVL_CNT_st0}{#insert zLopcbRAW_M_elc}{#insert zzLopSyn}	lopcb
lopcbp -- lopcb, escaped	{#insert zvESC_LVL_CNT_st1}{#insert zLopcbRAW_M_elc}{#insert zzLopSyn}	lopcbp
lopcbq -- lopcb, doubly-escaped (or more)	{#insert zvESC_LVL_CNT_stPrompt}{#insert zLopcbRAW_M_elc}{#insert zzLopSyn}	lopcbq
lopci -- {#LOOP ... -count {#CALC [crsr]}}	{#insert zvESC_LVL_CNT_st0}{#insert zLopciRAW_M_elc}{#insert zzLopSyn}	lopci
lopcip -- lopci, escaped	{#insert zvESC_LVL_CNT_st1}{#insert zLopciRAW_M_elc}{#insert zzLopSyn}	lopcip
lopciq -- lopci, doubly-escaped (or more)	{#insert zvESC_LVL_CNT_stPrompt}{#insert zLopciRAW_M_elc}{#insert zzLopSyn}	lopciq
lopcp -- lopc, escaped	{#insert zvESC_LVL_CNT_st1}{#insert zLopcRAW_M_elc}{#insert zzLopSyn}	lopcp
lopcq -- lopc, doubly-escaped (or more)	{#insert zvESC_LVL_CNT_stPrompt}{#insert zLopcRAW_M_elc}{#insert zzLopSyn}	lopcq
lopct -- {#LOOP [crsr] -count {#insert [paste]}}  [**uses x-mark]	{#insert zvESC_LVL_CNT_st0}{#insert zLopctRAW_M_elc}{#insert zzLopSyn}	lopct
lopctp -- lopct, escaped	{#insert zvESC_LVL_CNT_st1}{#insert zLopctRAW_M_elc}{#insert zzLopSyn}	lopctp
lopctq -- lopct, doubly-escaped (or more)	{#insert zvESC_LVL_CNT_stPrompt}{#insert zLopctRAW_M_elc}{#insert zzLopSyn}	lopctq
lopp -- lop, escaped	{#insert zvESC_LVL_CNT_st1}{#insert zLopRAW_M_elc}{#insert zzLopSyn}	lopp
lopq -- lop, doubly-escaped (or more)	{#insert zvESC_LVL_CNT_stPrompt}{#insert zLopRAW_M_elc}{#insert zzLopSyn}	lopq
lopt -- {#LOOP {#insert [paste]} -count [crsr]}	{#insert zvESC_LVL_CNT_st0}{#insert zLoptRAW_M_elc}{#insert zzLopSyn}	lopt
loptp -- lopt, escaped	{#insert zvESC_LVL_CNT_st1}{#insert zLoptRAW_M_elc}{#insert zzLopSyn}	loptp
loptq -- lopt, doubly-escaped (or more)	{#insert zvESC_LVL_CNT_stPrompt}{#insert zLoptRAW_M_elc}{#insert zzLopSyn}	loptq
lopx -- {#LOOP x-mrk -count x-mrk}	{#insert zvESC_LVL_CNT_st0}{#insert zLopxRAW_M_elc}{#insert zzLopSyn}	lopx
lopxp -- lop, escaped	{#insert zvESC_LVL_CNT_st1}{#insert zLopxRAW_M_elc}{#insert zzLopSyn}	lopxp
lopxq -- lop, doubly-escaped (or more)	{#insert zvESC_LVL_CNT_stPrompt}{#insert zLopxRAW_M_elc}{#insert zzLopSyn}	lopxq

pccloptestall	{#SETPHRASE -description zvQB_STR_LIST -content {#insert zzPccCrsAllMainAbrvs1CQBL} -autotext zvQB_STR_LIST -folder ctvv_folder}{#insert zzTestAllMainPhrsCrtrAbrvs_M_qbl}	pccloptestall

zLopRAW_M_elc	{#insert zOY_M_elc}#LOOP  -count {#insert zXmark}{#insert zCY_M_elc}{#insert zzLeftPrevEscCrly_M_elc}{#LEFT -count 11}	zLopRAW_M_elc
zLopbRAW_M_elc	{#insert zOY_M_elc}#LOOP {#insert zTPPaste} -count {#insert zCY_M_elc}{#insert zzLeftPrevEscCrly_M_elc}	zLopbRAW_M_elc
zLopcRAW_M_elc	{#insert zOY_M_elc}#LOOP {#insert zXmark} -count {#insert zCY_M_elc}{#insert zzLeftPrevEscCrly_M_elc}	zLopcRAW_M_elc
zLopcbRAW_M_elc	{#insert zOY_M_elc}#LOOP {#insert zXmark} -count {#insert zTPPaste}{#insert zCY_M_elc}{#insert zXUp}	zLopcbRAW_M_elc
zLopciRAW_M_elc	{#insert zOY_M_elc}#LOOP {#insert zXmark} -count \\\{#CALC  -round 0 -thousands none\\\}{#insert zCY_M_elc}{#insert zzLeftPrevEscCrly_M_elc}{#LEFT -count 26}	zLopciRAW_M_elc
zLopctRAW_M_elc	{#insert zOY_M_elc}#LOOP {#insert zXmark} -count \\\{#insert {#insert zTPPaste}\\\}{#insert zCY_M_elc}{#insert zzLeftPrevEscCrly_M_elc}{#insert zXUp}	zLopctRAW_M_elc
zLoptRAW_M_elc	{#insert zOY_M_elc}#LOOP \\\{#insert {#insert zTPPaste}\\\} -count {#insert zCY_M_elc}{#insert zzLeftPrevEscCrly_M_elc}	zLoptRAW_M_elc
zLopxRAW_M_elc	{#insert zOY_M_elc}#LOOP {#insert zXmark} -count {#insert zXmark}{#insert zCY_M_elc}	zLopxRAW_M_elc

zzLopSyn	{#BALLOON -title Syntax: LOOP -text lop[b,t][[p,q]] ~~ (go to main [action] param) //  lopc[b,i,t][[p,q]] ~~ (go to count param)  //  lopx=both params x~mark  //  [b]=paste, [i]=CALC, [t]=insb, [p]=esc'd, [q]=dbly~or~more~esc'd  //  lcmtargetinfo  //  pccloptestall}	zzLopSyn

zzPccCrsAllMainAbrvs1CQBL	[Lop][Lopb][Lopcb][Lopc][Lopci][Lopct][Lopt][Lopx]	zzPccCrsAllMainAbrvs1CQBL

